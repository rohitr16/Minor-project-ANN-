using System;
namespace ParticleSwarmTraining
{
    class ParticleTrainingProgram
    {
        static void Main(string[] args)
        {
            Console.WriteLine("\nBegin neural network training with particle swarm optimization demo\n");
            Console.WriteLine("Data is a 30-item subset of the famous Iris flower set");
            Console.WriteLine("Data is sepal length, width, petal length, width -> iris species");
            Console.WriteLine("Iris setosa = 0 0 1, Iris versicolor = 0 1 0, Iris virginica = 1 0 0 ");
            Console.WriteLine("Predicting species from sepal length & width, petal length & width\n");

            // this is a 30-item subset of the 150-item set
            // data has been randomly assign to train (80%) and test (20%) sets
            // y-value (species) encoding: (0,0,1) = setosa; (0,1,0) = versicolor; (1,0,0) = virginica
            // for simplicity, data has not been normalized as you would in a real scenario

         //  double[][] trainData = new double[45][];

            //double[][] trainData = new double[120][];

            //trainData[0] = new double[] { 15.26, 14.84, 0.871, 5.763, 3.312, 2.221, 5.22, 1, 0, 0 };
            //trainData[1] = new double[] { 14.88, 14.57, 0.8811, 5.554, 3.333, 1.018, 4.956, 1, 0, 0 };
            //trainData[2] = new double[] { 14.29, 14.09, 0.905, 5.291, 3.337, 2.699, 4.825, 1, 0, 0 };
            //trainData[3] = new double[] { 13.84, 13.94, 0.8955, 5.324, 3.379, 2.259, 4.805, 1, 0, 0 };
            //trainData[4] = new double[] { 16.14, 14.99, 0.9034, 5.658, 3.562, 1.355, 5.175, 1, 0, 0 };
            //trainData[5] = new double[] { 14.38, 14.21, 0.8951, 5.386, 3.312, 2.462, 4.956, 1, 0, 0 };
            //trainData[6] = new double[] { 14.69, 14.49, 0.8799, 5.563, 3.259, 3.586, 5.219, 1, 0, 0 };
            //trainData[7] = new double[] { 14.11, 14.1, 0.8911, 5.42, 3.302, 2.7, 5, 1, 0, 0 };
            //trainData[8] = new double[] { 16.63, 15.46, 0.8747, 6.053, 3.465, 2.04, 5.877, 1, 0, 0 };
            //trainData[9] = new double[] { 16.44, 15.25, 0.888, 5.884, 3.505, 1.969, 5.533, 1, 0, 0 };
            //trainData[10] = new double[] { 15.26, 14.85, 0.8696, 5.714, 3.242, 4.543, 5.314, 1, 0, 0 };
            //trainData[11] = new double[] { 14.03, 14.16, 0.8796, 5.438, 3.201, 1.717, 5.001, 1, 0, 0 };
            //trainData[12] = new double[] { 13.89, 14.02, 0.888, 5.439, 3.199, 3.986, 4.738, 1, 0, 0 };
            //trainData[13] = new double[] { 13.78, 14.06, 0.8759, 5.479, 3.156, 3.136, 4.872, 1, 0, 0 };
            //trainData[14] = new double[] { 13.74, 14.05, 0.8744, 5.482, 3.114, 2.932, 4.825, 1, 0, 0 };
            //trainData[15] = new double[] { 14.59, 14.28, 0.8993, 5.351, 3.333, 4.185, 4.781, 1, 0, 0 };
            //trainData[16] = new double[] { 13.99, 13.83, 0.9183, 5.119, 3.383, 5.234, 4.781, 1, 0, 0 };
            //trainData[17] = new double[] { 15.69, 14.75, 0.9058, 5.527, 3.514, 1.599, 5.046, 1, 0, 0 };
            //trainData[18] = new double[] { 14.7, 14.21, 0.9153, 5.205, 3.466, 1.767, 4.649, 1, 0, 0 };
            //trainData[19] = new double[] { 12.72, 13.57, 0.8686, 5.226, 3.049, 4.102, 4.914, 1, 0, 0 };
            //trainData[20] = new double[] { 14.16, 14.4, 0.8584, 5.658, 3.129, 3.072, 5.176, 1, 0, 0 };
            //trainData[21] = new double[] { 14.11, 14.26, 0.8722, 5.52, 3.168, 2.688, 5.219, 1, 0, 0 };
            //trainData[22] = new double[] { 15.88, 14.9, 0.8988, 5.618, 3.507, 0.7651, 5.091, 1, 0, 0 };
            //trainData[23] = new double[] { 12.08, 13.23, 0.8664, 5.099, 2.936, 1.415, 4.961, 1, 0, 0 };
            //trainData[24] = new Double[] { 15.01, 14.76, 0.8657, 5.789, 3.245, 1.791, 5.001, 1, 0, 0 };
            //trainData[25] = new Double[] { 16.19, 15.16, 0.8849, 5.833, 3.421, 0.903, 5.307, 1, 0, 0 };
            //trainData[26] = new Double[] { 13.02, 13.76, 0.8641, 5.395, 3.026, 3.373, 4.825, 1, 0, 0 };
            //trainData[27] = new Double[] { 12.74, 13.67, 0.8564, 5.395, 2.956, 2.504, 4.869, 1, 0, 0 };
            //trainData[28] = new Double[] { 14.11, 14.18, 0.882, 5.541, 3.221, 2.754, 5.038, 1, 0, 0 };
            //trainData[29] = new Double[] { 13.45, 14.02, 0.8604, 5.516, 3.065, 3.531, 5.097, 1, 0, 0 };
            //trainData[30] = new Double[] { 13.16, 13.82, 0.8662, 5.454, 2.975, 0.8551, 5.056, 1, 0, 0 };
            //trainData[31] = new Double[] { 15.49, 14.94, 0.8724, 5.757, 3.371, 3.412, 5.228, 1, 0, 0 };
            //trainData[32] = new Double[] { 14.09, 14.41, 0.8529, 5.717, 3.186, 3.92, 5.299, 1, 0, 0 };
            //trainData[33] = new Double[] { 13.94, 14.17, 0.8728, 5.585, 3.15, 2.124, 5.012, 1, 0, 0 };
            //trainData[34] = new Double[] { 15.05, 14.68, 0.8779, 5.712, 3.328, 2.129, 5.36, 1, 0, 0 };
            //trainData[35] = new Double[] { 16.12, 15, 0.9, 5.709, 3.485, 2.27, 5.443, 1, 0, 0 };
            //trainData[36] = new Double[] { 16.2, 15.27, 0.8734, 5.826, 3.464, 2.823, 5.527, 1, 0, 0 };
            //trainData[37] = new Double[] { 17.08, 15.38, 0.9079, 5.832, 3.683, 2.956, 5.484, 1, 0, 0 };
            //trainData[38] = new Double[] { 14.8, 14.52, 0.8823, 5.656, 3.288, 3.112, 5.309, 1, 0, 0 };
            //trainData[39] = new Double[] { 14.28, 14.17, 0.8944, 5.397, 3.298, 6.685, 5.001, 1, 0, 0 };












            //trainData[40] = new Double[] { 17.63, 15.98, 0.8673, 6.191, 3.561, 4.076, 6.06, 0, 1, 0 };
            //trainData[41] = new Double[] { 16.84, 15.67, 0.8623, 5.998, 3.484, 4.675, 5.877, 0, 1, 0 };
            //trainData[42] = new Double[] { 17.26, 15.73, 0.8763, 5.978, 3.594, 4.539, 5.791, 0, 1, 0 };
            //trainData[43] = new Double[] { 19.11, 16.26, 0.9081, 6.154, 3.93, 2.936, 6.079, 0, 1, 0 };
            //trainData[44] = new Double[] { 16.82, 15.51, 0.8786, 6.017, 3.486, 4.004, 5.841, 0, 1, 0 };
            //trainData[45] = new Double[] { 16.77, 15.62, 0.8638, 5.927, 3.438, 4.92, 5.795, 0, 1, 0 };
            //trainData[46] = new Double[] { 17.32, 15.91, 0.8599, 6.064, 3.403, 3.824, 5.922, 0, 1, 0 };
            //trainData[47] = new Double[] { 20.71, 17.23, 0.8763, 6.579, 3.814, 4.451, 6.451, 0, 1, 0 };
            //trainData[48] = new Double[] { 18.94, 16.49, 0.875, 6.445, 3.639, 5.064, 6.362, 0, 1, 0 };
            //trainData[49] = new Double[] { 17.12, 15.55, 0.8892, 5.85, 3.566, 2.858, 5.746, 0, 1, 0 };
            //trainData[50] = new Double[] { 16.53, 15.34, 0.8823, 5.875, 3.467, 5.532, 5.88, 0, 1, 0 };
            //trainData[51] = new Double[] { 18.72, 16.19, 0.8977, 6.006, 3.857, 5.324, 5.879, 0, 1, 0 };
            //trainData[52] = new Double[] { 20.2, 16.89, 0.8894, 6.285, 3.864, 5.173, 6.187, 0, 1, 0 };
            //trainData[53] = new Double[] { 19.57, 16.74, 0.8779, 6.384, 3.772, 1.472, 6.273, 0, 1, 0 };
            //trainData[54] = new Double[] { 19.51, 16.71, 0.878, 6.366, 3.801, 2.962, 6.185, 0, 1, 0 };
            //trainData[55] = new Double[] { 18.27, 16.09, 0.887, 6.173, 3.651, 2.443, 6.197, 0, 1, 0 };
            //trainData[56] = new Double[] { 18.88, 16.26, 0.8969, 6.084, 3.764, 1.649, 6.109, 0, 1, 0 };
            //trainData[57] = new Double[] { 18.98, 16.66, 0.859, 6.549, 3.67, 3.691, 6.498, 0, 1, 0 };
            //trainData[58] = new Double[] { 21.18, 17.21, 0.8989, 6.573, 4.033, 5.78, 6.231, 0, 1, 0 };
            //trainData[59] = new Double[] { 20.88, 17.05, 0.9031, 6.45, 4.032, 5.016, 6.321, 0, 1, 0 };
            //trainData[60] = new Double[] { 20.1, 16.99, 0.8746, 6.581, 3.785, 1.955, 6.449, 0, 1, 0 };
            //trainData[61] = new Double[] { 18.76, 16.2, 0.8984, 6.172, 3.796, 3.12, 6.053, 0, 1, 0 };
            //trainData[62] = new Double[] { 18.81, 16.29, 0.8906, 6.272, 3.693, 3.237, 6.053, 0, 1, 0 };
            //trainData[63] = new Double[] { 18.59, 16.05, 0.9066, 6.037, 3.86, 6.001, 5.877, 0, 1, 0 };
            //trainData[64] = new Double[] { 18.36, 16.52, 0.8452, 6.666, 3.485, 4.933, 6.448, 0, 1, 0 };
            //trainData[65] = new Double[] { 16.87, 15.65, 0.8648, 6.139, 3.463, 3.696, 5.967, 0, 1, 0 };
            //trainData[66] = new Double[] { 19.31, 16.59, 0.8815, 6.341, 3.81, 3.477, 6.238, 0, 1, 0 };
            //trainData[67] = new Double[] { 18.98, 16.57, 0.8687, 6.449, 3.552, 2.144, 6.453, 0, 1, 0 };
            //trainData[68] = new Double[] { 18.17, 16.26, 0.8637, 6.271, 3.512, 2.853, 6.273, 0, 1, 0 };
            //trainData[69] = new Double[] { 18.72, 16.34, 0.881, 6.219, 3.684, 2.188, 6.097, 0, 1, 0 };
            //trainData[70] = new Double[] { 16.41, 15.25, 0.8866, 5.718, 3.525, 4.217, 5.618, 0, 1, 0 };
            //trainData[71] = new Double[] { 17.99, 15.86, 0.8992, 5.89, 3.694, 2.068, 5.837, 0, 1, 0 };
            //trainData[72] = new Double[] { 19.46, 16.5, 0.8985, 6.113, 3.892, 4.308, 6.009, 0, 1, 0 };
            //trainData[73] = new Double[] { 19.18, 16.63, 0.8717, 6.369, 3.681, 3.357, 6.229, 0, 1, 0 };
            //trainData[74] = new Double[] { 18.95, 16.42, 0.8829, 6.248, 3.755, 3.368, 6.148, 0, 1, 0 };
            //trainData[75] = new Double[] { 18.83, 16.29, 0.8917, 6.037, 3.786, 2.553, 5.879, 0, 1, 0 };
            //trainData[76] = new Double[] { 18.85, 16.17, 0.9056, 6.152, 3.806, 2.843, 6.2, 0, 1, 0 };
            //trainData[77] = new Double[] { 17.63, 15.86, 0.88, 6.033, 3.573, 3.747, 5.929, 0, 1, 0 };
            //trainData[78] = new Double[] { 19.94, 16.92, 0.8752, 6.675, 3.763, 3.252, 6.55, 0, 1, 0 };
            //trainData[79] = new Double[] { 18.55, 16.22, 0.8865, 6.153, 3.674, 1.738, 5.894, 0, 1, 0 };






            //trainData[80] = new Double[] { 13.07, 13.92, 0.848, 5.472, 2.994, 5.304, 5.395, 0, 0, 1 };
            //trainData[81] = new Double[] { 13.32, 13.94, 0.8613, 5.541, 3.073, 7.035, 5.44, 0, 0, 1 };
            //trainData[82] = new Double[] { 13.34, 13.95, 0.862, 5.389, 3.074, 5.995, 5.307, 0, 0, 1 };
            //trainData[83] = new Double[] { 12.22, 13.32, 0.8652, 5.224, 2.967, 5.469, 5.221, 0, 0, 1 };
            //trainData[84] = new Double[] { 11.82, 13.4, 0.8274, 5.314, 2.777, 4.471, 5.178, 0, 0, 1 };
            //trainData[85] = new Double[] { 11.21, 13.13, 0.8167, 5.279, 2.687, 6.169, 5.275, 0, 0, 1 };
            //trainData[86] = new Double[] { 11.43, 13.13, 0.8335, 5.176, 2.719, 2.221, 5.132, 0, 0, 1 };
            //trainData[87] = new Double[] { 12.49, 13.46, 0.8658, 5.267, 2.967, 4.421, 5.002, 0, 0, 1 };
            //trainData[88] = new Double[] { 12.7, 13.71, 0.8491, 5.386, 2.911, 3.26, 5.316, 0, 0, 1 };
            //trainData[89] = new Double[] { 10.79, 12.93, 0.8107, 5.317, 2.648, 5.462, 5.194, 0, 0, 1 };
            //trainData[90] = new Double[] { 11.83, 13.23, 0.8496, 5.263, 2.84, 5.195, 5.307, 0, 0, 1 };
            //trainData[91] = new Double[] { 12.01, 13.52, 0.8249, 5.405, 2.776, 6.992, 5.27, 0, 0, 1 };
            //trainData[92] = new Double[] { 12.26, 13.6, 0.8333, 5.408, 2.833, 4.756, 5.36, 0, 0, 1 };
            //trainData[93] = new Double[] { 11.18, 13.04, 0.8266, 5.22, 2.693, 3.332, 5.001, 0, 0, 1 };
            //trainData[94] = new Double[] { 11.36, 13.05, 0.8382, 5.175, 2.755, 4.048, 5.263, 0, 0, 1 };
            //trainData[95] = new Double[] { 11.19, 13.05, 0.8253, 5.25, 2.675, 5.813, 5.219, 0, 0, 1 };
            //trainData[96] = new Double[] { 11.34, 12.87, 0.8596, 5.053, 2.849, 3.347, 5.003, 0, 0, 1 };
            //trainData[97] = new Double[] { 12.13, 13.73, 0.8081, 5.394, 2.745, 4.825, 5.22, 0, 0, 1 };
            //trainData[98] = new Double[] { 11.75, 13.52, 0.8082, 5.444, 2.678, 4.378, 5.31, 0, 0, 1 };
            //trainData[99] = new Double[] { 11.49, 13.22, 0.8263, 5.304, 2.695, 5.388, 5.31, 0, 0, 1 };
            //trainData[100] = new Double[] { 12.54, 13.67, 0.8425, 5.451, 2.879, 3.082, 5.491, 0, 0, 1 };
            //trainData[101] = new Double[] { 12.02, 13.33, 0.8503, 5.35, 2.81, 4.271, 5.308, 0, 0, 1 };
            //trainData[102] = new Double[] { 12.05, 13.41, 0.8416, 5.267, 2.847, 4.988, 5.046, 0, 0, 1 };
            //trainData[103] = new Double[] { 12.55, 13.57, 0.8558, 5.333, 2.968, 4.419, 5.176, 0, 0, 1 };
            //trainData[104] = new Double[] { 11.14, 12.79, 0.8558, 5.011, 2.794, 6.388, 5.049, 0, 0, 1 };
            //trainData[105] = new Double[] { 12.1, 13.15, 0.8793, 5.105, 2.941, 2.201, 5.056, 0, 0, 1 };
            //trainData[106] = new Double[] { 12.44, 13.59, 0.8462, 5.319, 2.897, 4.924, 5.27, 0, 0, 1 };
            //trainData[107] = new Double[] { 12.15, 13.45, 0.8443, 5.417, 2.837, 3.638, 5.338, 0, 0, 1 };
            //trainData[108] = new Double[] { 11.35, 13.12, 0.8291, 5.176, 2.668, 4.337, 5.132, 0, 0, 1 };
            //trainData[109] = new Double[] { 11.24, 13, 0.8359, 5.09, 2.715, 3.521, 5.088, 0, 0, 1 };
            //trainData[110] = new Double[] { 11.02, 13, 0.8189, 5.325, 2.701, 6.735, 5.163, 0, 0, 1 };
            //trainData[111] = new Double[] { 11.55, 13.1, 0.8455, 5.167, 2.845, 6.715, 4.956, 0, 0, 1 };
            //trainData[112] = new Double[] { 11.27, 12.97, 0.8419, 5.088, 2.763, 4.309, 5, 0, 0, 1 };
            //trainData[113] = new Double[] { 11.4, 13.08, 0.8375, 5.136, 2.763, 5.588, 5.089, 0, 0, 1 };
            //trainData[114] = new Double[] { 10.83, 12.96, 0.8099, 5.278, 2.641, 5.182, 5.185, 0, 0, 1 };
            //trainData[115] = new Double[] { 10.8, 12.57, 0.859, 4.981, 2.821, 4.773, 5.063, 0, 0, 1 };
            //trainData[116] = new Double[] { 11.26, 13.01, 0.8355, 5.186, 2.71, 5.335, 5.092, 0, 0, 1 };
            //trainData[117] = new Double[] { 10.74, 12.73, 0.8329, 5.145, 2.642, 4.702, 4.963, 0, 0, 1 };
            //trainData[118] = new Double[] { 11.48, 13.05, 0.8473, 5.18, 2.758, 5.876, 5.002, 0, 0, 1 };
            //trainData[119] = new Double[] { 12.21, 13.47, 0.8453, 5.357, 2.893, 1.661, 5.178, 0, 0, 1 };







            //double[][] testData = new double[90][];




            //testData[0] = new double[] { 13.54, 13.85, 0.8871, 5.348, 3.156, 2.587, 5.178, 1, 0, 0 };
            //testData[1] = new double[] { 13.5, 13.85, 0.8852, 5.351, 3.158, 2.249, 5.176, 1, 0, 0 };
            //testData[2] = new double[] { 13.16, 13.55, 0.9009, 5.138, 3.201, 2.461, 4.783, 1, 0, 0 };
            //testData[3] = new double[] { 15.5, 14.86, 0.882, 5.877, 3.396, 4.711, 5.528, 1, 0, 0 };
            //testData[4] = new double[] { 15.11, 14.54, 0.8986, 5.579, 3.462, 3.128, 5.18, 1, 0, 0 };
            //testData[5] = new double[] { 13.8, 14.04, 0.8794, 5.376, 3.155, 1.56, 4.961, 1, 0, 0 };
            //testData[6] = new double[] { 15.36, 14.76, 0.8861, 5.701, 3.393, 1.367, 5.132, 1, 0, 0 };
            //testData[7] = new double[] { 14.99, 14.56, 0.8883, 5.57, 3.377, 2.958, 5.175, 1, 0, 0 };
            //testData[8] = new double[] { 14.79, 14.52, 0.8819, 5.545, 3.291, 2.704, 5.111, 1, 0, 0 };
            //testData[9] = new double[] { 14.86, 14.67, 0.8676, 5.678, 3.258, 2.129, 5.351, 1, 0, 0 };
            //testData[10] = new double[] { 14.43, 14.4, 0.8751, 5.585, 3.272, 3.975, 5.144, 1, 0, 0 };
            //testData[11] = new double[] { 15.78, 14.91, 0.8923, 5.674, 3.434, 5.593, 5.136, 1, 0, 0 };
            //testData[12] = new double[] { 14.49, 14.61, 0.8538, 5.715, 3.113, 4.116, 5.396, 1, 0, 0 };
            //testData[13] = new double[] { 14.33, 14.28, 0.8831, 5.504, 3.199, 3.328, 5.224, 1, 0, 0 };
            //testData[14] = new double[] { 14.52, 14.6, 0.8557, 5.741, 3.113, 1.481, 5.487, 1, 0, 0 };
            //testData[15] = new double[] { 15.03, 14.77, 0.8658, 5.702, 3.212, 1.933, 5.439, 1, 0, 0 };
            //testData[16] = new double[] { 14.46, 14.35, 0.8818, 5.388, 3.377, 2.802, 5.044, 1, 0, 0 };
            //testData[17] = new double[] { 14.92, 14.43, 0.9006, 5.384, 3.412, 1.142, 5.088, 1, 0, 0 };
            //testData[18] = new double[] { 15.38, 14.77, 0.8857, 5.662, 3.419, 1.999, 5.222, 1, 0, 0 };
            //testData[19] = new double[] { 12.11, 13.47, 0.8392, 5.159, 3.032, 1.502, 4.519, 1, 0, 0 };
            //testData[20] = new double[] { 11.42, 12.86, 0.8683, 5.008, 2.85, 2.7, 4.607, 1, 0, 0 };
            //testData[21] = new double[] { 11.23, 12.63, 0.884, 4.902, 2.879, 2.269, 4.703, 1, 0, 0 };
            //testData[22] = new double[] { 12.36, 13.19, 0.8923, 5.076, 3.042, 3.22, 4.605, 1, 0, 0 };
            //testData[23] = new double[] { 13.22, 13.84, 0.868, 5.395, 3.07, 4.157, 5.088, 1, 0, 0 };
            //testData[24] = new Double[] { 12.78, 13.57, 0.8716, 5.262, 3.026, 1.176, 4.782, 1, 0, 0 };
            //testData[25] = new Double[] { 12.88, 13.5, 0.8879, 5.139, 3.119, 2.352, 4.607, 1, 0, 0 };
            //testData[26] = new Double[] { 14.34, 14.37, 0.8726, 5.63, 3.19, 1.313, 5.15, 1, 0, 0 };
            //testData[27] = new Double[] { 14.01, 14.29, 0.8625, 5.609, 3.158, 2.217, 5.132, 1, 0, 0 };
            //testData[28] = new Double[] { 14.37, 14.39, 0.8726, 5.569, 3.153, 1.464, 5.3, 1, 0, 0 };
            //testData[29] = new Double[] { 12.73, 13.75, 0.8458, 5.412, 2.882, 3.533, 5.067, 1, 0, 0 };











            //testData[30] = new Double[] { 18.45, 16.12, 0.8921, 6.107, 3.769, 2.235, 5.794, 0, 1, 0 };
            //testData[31] = new Double[] { 19.38, 16.72, 0.8716, 6.303, 3.791, 3.678, 5.965, 0, 1, 0 };
            //testData[32] = new Double[] { 19.13, 16.31, 0.9035, 6.183, 3.902, 2.109, 5.924, 0, 1, 0 };
            //testData[33] = new Double[] { 19.14, 16.61, 0.8722, 6.259, 3.737, 6.682, 6.053, 0, 1, 0 };
            //testData[34] = new Double[] { 20.97, 17.25, 0.8859, 6.563, 3.991, 4.677, 6.316, 0, 1, 0 };
            //testData[35] = new Double[] { 19.06, 16.45, 0.8854, 6.416, 3.719, 2.248, 6.163, 0, 1, 0 };
            //testData[36] = new Double[] { 18.96, 16.2, 0.9077, 6.051, 3.897, 4.334, 5.75, 0, 1, 0 };
            //testData[37] = new Double[] { 19.15, 16.45, 0.889, 6.245, 3.815, 3.084, 6.185, 0, 1, 0 };
            //testData[38] = new Double[] { 18.89, 16.23, 0.9008, 6.227, 3.769, 3.639, 5.966, 0, 1, 0 };
            //testData[39] = new Double[] { 20.03, 16.9, 0.8811, 6.493, 3.857, 3.063, 6.32, 0, 1, 0 };
            //testData[40] = new Double[] { 20.24, 16.91, 0.8897, 6.315, 3.962, 5.901, 6.188, 0, 1, 0 };
            //testData[41] = new Double[] { 18.14, 16.12, 0.8772, 6.059, 3.563, 3.619, 6.011, 0, 1, 0 };
            //testData[42] = new Double[] { 16.17, 15.38, 0.8588, 5.762, 3.387, 4.286, 5.703, 0, 1, 0 };
            //testData[43] = new Double[] { 18.43, 15.97, 0.9077, 5.98, 3.771, 2.984, 5.905, 0, 1, 0 };
            //testData[44] = new Double[] { 15.99, 14.89, 0.9064, 5.363, 3.582, 3.336, 5.144, 0, 1, 0 };
            //testData[45] = new Double[] { 18.75, 16.18, 0.8999, 6.111, 3.869, 4.188, 5.992, 0, 1, 0 };
            //testData[46] = new Double[] { 18.65, 16.41, 0.8698, 6.285, 3.594, 4.391, 6.102, 0, 1, 0 };
            //testData[47] = new Double[] { 17.98, 15.85, 0.8993, 5.979, 3.687, 2.257, 5.919, 0, 1, 0 };
            //testData[48] = new Double[] { 20.16, 17.03, 0.8735, 6.513, 3.773, 1.91, 6.185, 0, 1, 0 };
            //testData[49] = new Double[] { 17.55, 15.66, 0.8991, 5.791, 3.69, 5.366, 5.661, 0, 1, 0 };
            //testData[50] = new Double[] { 18.3, 15.89, 0.9108, 5.979, 3.755, 2.837, 5.962, 0, 1, 0 };
            //testData[51] = new Double[] { 18.94, 16.32, 0.8942, 6.144, 3.825, 2.908, 5.949, 0, 1, 0 };
            //testData[52] = new Double[] { 15.38, 14.9, 0.8706, 5.884, 3.268, 4.462, 5.795, 0, 1, 0 };
            //testData[53] = new Double[] { 16.16, 15.33, 0.8644, 5.845, 3.395, 4.266, 5.795, 0, 1, 0 };
            //testData[54] = new Double[] { 15.56, 14.89, 0.8823, 5.776, 3.408, 4.972, 5.847, 0, 1, 0 };
            //testData[55] = new Double[] { 15.38, 14.66, 0.899, 5.477, 3.465, 3.6, 5.439, 0, 1, 0 };
            //testData[56] = new Double[] { 17.36, 15.76, 0.8785, 6.145, 3.574, 3.526, 5.971, 0, 1, 0 };
            //testData[57] = new Double[] { 15.57, 15.15, 0.8527, 5.92, 3.231, 2.64, 5.879, 0, 1, 0 };
            //testData[58] = new Double[] { 15.6, 15.11, 0.858, 5.832, 3.286, 2.725, 5.752, 0, 1, 0 };
            //testData[59] = new Double[] { 16.23, 15.18, 0.885, 5.872, 3.472, 3.769, 5.922, 0, 1, 0 };





            //testData[60] = new Double[] { 11.41, 12.95, 0.856, 5.09, 2.775, 4.957, 4.825, 0, 0, 1 };
            //testData[61] = new Double[] { 12.46, 13.41, 0.8706, 5.236, 3.017, 4.987, 5.147, 0, 0, 1 };
            //testData[62] = new Double[] { 12.19, 13.36, 0.8579, 5.24, 2.909, 4.857, 5.158, 0, 0, 1 };
            //testData[63] = new Double[] { 11.65, 13.07, 0.8575, 5.108, 2.85, 5.209, 5.135, 0, 0, 1 };
            //testData[64] = new Double[] { 12.89, 13.77, 0.8541, 5.495, 3.026, 6.185, 5.316, 0, 0, 1 };
            //testData[65] = new Double[] { 11.56, 13.31, 0.8198, 5.363, 2.683, 4.062, 5.182, 0, 0, 1 };
            //testData[66] = new Double[] { 11.81, 13.45, 0.8198, 5.413, 2.716, 4.898, 5.352, 0, 0, 1 };
            //testData[67] = new Double[] { 10.91, 12.8, 0.8372, 5.088, 2.675, 4.179, 4.956, 0, 0, 1 };
            //testData[68] = new Double[] { 11.23, 12.82, 0.8594, 5.089, 2.821, 7.524, 4.957, 0, 0, 1 };
            //testData[69] = new Double[] { 10.59, 12.41, 0.8648, 4.899, 2.787, 4.975, 4.794, 0, 0, 1 };
            //testData[70] = new Double[] { 10.93, 12.8, 0.839, 5.046, 2.717, 5.398, 5.045, 0, 0, 1 };
            //testData[71] = new Double[] { 11.27, 12.86, 0.8563, 5.091, 2.804, 3.985, 5.001, 0, 0, 1 };
            //testData[72] = new Double[] { 11.87, 13.02, 0.8795, 5.132, 2.953, 3.597, 5.132, 0, 0, 1 };
            //testData[73] = new Double[] { 10.82, 12.83, 0.8256, 5.18, 2.63, 4.853, 5.089, 0, 0, 1 };
            //testData[74] = new Double[] { 12.11, 13.27, 0.8639, 5.236, 2.975, 4.132, 5.012, 0, 0, 1 };
            //testData[75] = new Double[] { 12.8, 13.47, 0.886, 5.16, 3.126, 4.873, 4.914, 0, 0, 1 };
            //testData[76] = new Double[] { 12.79, 13.53, 0.8786, 5.224, 3.054, 5.483, 4.958, 0, 0, 1 };
            //testData[77] = new Double[] { 13.37, 13.78, 0.8849, 5.32, 3.128, 4.67, 5.091, 0, 0, 1 };
            //testData[78] = new Double[] { 12.62, 13.67, 0.8481, 5.41, 2.911, 3.306, 5.231, 0, 0, 1 };
            //testData[79] = new Double[] { 12.76, 13.38, 0.8964, 5.073, 3.155, 2.828, 4.83, 0, 0, 1 };
            //testData[80] = new Double[] { 12.38, 13.44, 0.8609, 5.219, 2.989, 5.472, 5.045, 0, 0, 1 };
            //testData[81] = new Double[] { 12.67, 13.32, 0.8977, 4.984, 3.135, 2.3, 4.745, 0, 0, 1 };
            //testData[82] = new Double[] { 11.18, 12.72, 0.868, 5.009, 2.81, 4.051, 4.828, 0, 0, 1 };
            //testData[83] = new Double[] { 12.7, 13.41, 0.8874, 5.183, 3.091, 8.456, 5, 0, 0, 1 };
            //testData[84] = new Double[] { 12.37, 13.47, 0.8567, 5.204, 2.96, 3.919, 5.001, 0, 0, 1 };
            //testData[85] = new Double[] { 12.19, 13.2, 0.8783, 5.137, 2.981, 3.631, 4.87, 0, 0, 1 };
            //testData[86] = new Double[] { 11.23, 12.88, 0.8511, 5.14, 2.795, 4.325, 5.003, 0, 0, 1 };
            //testData[87] = new Double[] { 13.2, 13.66, 0.8883, 5.236, 3.232, 8.315, 5.056, 0, 0, 1 };
            //testData[88] = new Double[] { 11.84, 13.21, 0.8521, 5.175, 2.836, 3.598, 5.044, 0, 0, 1 };
            //testData[89] = new Double[] { 12.3, 13.34, 0.8684, 5.243, 2.974, 5.637, 5.063, 0, 0, 1 };



     
            //trainData[0] = new double[] { 6.3, 2.9, 5.6, 1.8, 1, 0, 0 };
            //trainData[1] = new double[] { 6.9, 3.1, 4.9, 1.5, 0, 1, 0 };
            //trainData[2] = new double[] { 4.6, 3.4, 1.4, 0.3, 0, 0, 1 };
            //trainData[3] = new double[] { 7.2, 3.6, 6.1, 2.5, 1, 0, 0 };
            //trainData[4] = new double[] { 4.7, 3.2, 1.3, 0.2, 0, 0, 1 };
            //trainData[5] = new double[] { 4.9, 3, 1.4, 0.2, 0, 0, 1 };
            //trainData[6] = new double[] { 7.6, 3, 6.6, 2.1, 1, 0, 0 };
            //trainData[7] = new double[] { 4.9, 2.4, 3.3, 1, 0, 1, 0 };
            //trainData[8] = new double[] { 5.4, 3.9, 1.7, 0.4, 0, 0, 1 };
            //trainData[9] = new double[] { 4.9, 3.1, 1.5, 0.1, 0, 0, 1 };
            //trainData[10] = new double[] { 5, 3.6, 1.4, 0.2, 0, 0, 1 };
            //trainData[11] = new double[] { 6.4, 3.2, 4.5, 1.5, 0, 1, 0 };
            //trainData[12] = new double[] { 4.4, 2.9, 1.4, 0.2, 0, 0, 1 };
            //trainData[13] = new double[] { 5.8, 2.7, 5.1, 1.9, 1, 0, 0 };
            //trainData[14] = new double[] { 6.3, 3.3, 6, 2.5, 1, 0, 0 };
            //trainData[15] = new double[] { 5.2, 2.7, 3.9, 1.4, 0, 1, 0 };
            //trainData[16] = new double[] { 7, 3.2, 4.7, 1.4, 0, 1, 0 };
            //trainData[17] = new double[] { 6.5, 2.8, 4.6, 1.5, 0, 1, 0 };
            //trainData[18] = new double[] { 4.9, 2.5, 4.5, 1.7, 1, 0, 0 };
            //trainData[19] = new double[] { 5.7, 2.8, 4.5, 1.3, 0, 1, 0 };
            //trainData[20] = new double[] { 5, 3.4, 1.5, 0.2, 0, 0, 1 };
            //trainData[21] = new double[] { 6.5, 3, 5.8, 2.2, 1, 0, 0 };
            //trainData[22] = new double[] { 5.5, 2.3, 4, 1.3, 0, 1, 0 };
            //trainData[23] = new double[] { 6.7, 2.5, 5.8, 1.8, 1, 0, 0 };

            //trainData[0] = new Double[] { 5.1, 3.5, 1.4, 0.2, 0, 0, 1 };
            //trainData[1] = new Double[] { 4.9, 3.0, 1.4, 0.2, 0, 0, 1 };
            //trainData[2] = new Double[] { 4.7, 3.2, 1.3, 0.2, 0, 0, 1 };
            //trainData[3] = new Double[] { 4.6, 3.1, 1.5, 0.2, 0, 0, 1 };
            //trainData[4] = new Double[] { 5.0, 3.6, 1.4, 0.2, 0, 0, 1 };
            //trainData[5] = new Double[] { 5.4, 3.9, 1.7, 0.4, 0, 0, 1 };
            //trainData[6] = new Double[] { 4.6, 3.4, 1.4, 0.3, 0, 0, 1 };
            //trainData[7] = new Double[] { 5.0, 3.4, 1.5, 0.2, 0, 0, 1 };
            //trainData[8] = new Double[] { 4.4, 2.9, 1.4, 0.2, 0, 0, 1 };
            //trainData[9] = new Double[] { 4.9, 3.1, 1.5, 0.1, 0, 0, 1 };
            //trainData[10] = new Double[] { 5.4, 3.7, 1.5, 0.2, 0, 0, 1 };
            //trainData[11] = new Double[] { 4.8, 3.4, 1.6, 0.2, 0, 0, 1 };
            //trainData[12] = new Double[] { 4.8, 3.0, 1.4, 0.1, 0, 0, 1 };
            //trainData[13] = new Double[] { 4.3, 3.0, 1.1, 0.1, 0, 0, 1 };
            //trainData[14] = new Double[] { 5.8, 4.0, 1.2, 0.2, 0, 0, 1 };
            //trainData[15] = new Double[] { 5.7, 4.4, 1.5, 0.4, 0, 0, 1 };
            //trainData[16] = new Double[] { 5.4, 3.9, 1.3, 0.4, 0, 0, 1 };
            //trainData[17] = new Double[] { 5.1, 3.5, 1.4, 0.3, 0, 0, 1 };
            //trainData[18] = new Double[] { 5.7, 3.8, 1.7, 0.3, 0, 0, 1 };
            //trainData[19] = new Double[] { 5.1, 3.8, 1.5, 0.3, 0, 0, 1 };
            //trainData[20] = new Double[] { 5.4, 3.4, 1.7, 0.2, 0, 0, 1 };
            //trainData[21] = new Double[] { 5.1, 3.7, 1.5, 0.4, 0, 0, 1 };
            //trainData[22] = new Double[] { 4.6, 3.6, 1.0, 0.2, 0, 0, 1 };
            //trainData[23] = new Double[] { 5.1, 3.3, 1.7, 0.5, 0, 0, 1 };
            //trainData[24] = new Double[] { 4.8, 3.4, 1.9, 0.2, 0, 0, 1 };
            //trainData[25] = new Double[] { 7.0, 3.2, 4.7, 1.4, 0, 1, 0 };
            //trainData[26] = new Double[] { 6.4, 3.2, 4.5, 1.5, 0, 1, 0 };
            //trainData[27] = new Double[] { 6.9, 3.1, 4.9, 1.5, 0, 1, 0 };
            //trainData[28] = new Double[] { 5.5, 2.3, 4.0, 1.3, 0, 1, 0 };
            //trainData[29] = new Double[] { 6.5, 2.8, 4.6, 1.5, 0, 1, 0 };
            //trainData[30] = new Double[] { 5.7, 2.8, 4.5, 1.3, 0, 1, 0 };
            //trainData[31] = new Double[] { 6.3, 3.3, 4.7, 1.6, 0, 1, 0 };
            //trainData[32] = new Double[] { 4.9, 2.4, 3.3, 1.0, 0, 1, 0 };
            //trainData[33] = new Double[] { 6.6, 2.9, 4.6, 1.3, 0, 1, 0 };
            //trainData[34] = new Double[] { 5.2, 2.7, 3.9, 1.4, 0, 1, 0 };
            //trainData[35] = new Double[] { 5.0, 2.0, 3.5, 1.0, 0, 1, 0 };
            //trainData[36] = new Double[] { 5.9, 3.0, 4.2, 1.5, 0, 1, 0 };
            //trainData[37] = new Double[] { 6.0, 2.2, 4.0, 1.0, 0, 1, 0 };
            //trainData[38] = new Double[] { 6.1, 2.9, 4.7, 1.4, 0, 1, 0 };
            //trainData[39] = new Double[] { 5.6, 2.9, 3.6, 1.3, 0, 1, 0 };
            //trainData[40] = new Double[] { 6.7, 3.1, 4.4, 1.4, 0, 1, 0 };
            //trainData[41] = new Double[] { 5.6, 3.0, 4.5, 1.5, 0, 1, 0 };
            //trainData[42] = new Double[] { 5.8, 2.7, 4.1, 1.0, 0, 1, 0 };
            //trainData[43] = new Double[] { 6.2, 2.2, 4.5, 1.5, 0, 1, 0 };
            //trainData[44] = new Double[] { 5.6, 2.5, 3.9, 1.1, 0, 1, 0 };
            //trainData[45] = new Double[] { 5.9, 3.2, 4.8, 1.8, 0, 1, 0 };
            //trainData[46] = new Double[] { 6.1, 2.8, 4.0, 1.3, 0, 1, 0 };
            //trainData[47] = new Double[] { 6.3, 2.5, 4.9, 1.5, 0, 1, 0 };
            //trainData[48] = new Double[] { 6.1, 2.8, 4.7, 1.2, 0, 1, 0 };
            //trainData[49] = new Double[] { 6.4, 2.9, 4.3, 1.3, 0, 1, 0 };
            //trainData[50] = new Double[] { 6.3, 3.3, 6.0, 2.5, 1, 0, 0 };
            //trainData[51] = new Double[] { 5.8, 2.7, 5.1, 1.9, 1, 0, 0, };
            //trainData[52] = new Double[] { 7.1, 3.0, 5.9, 2.1, 1, 0, 0 };//Iris-virginica
            //trainData[53] = new Double[] { 6.3, 2.9, 5.6, 1.8, 1, 0, 0 };//Iris-virginica
            //trainData[54] = new Double[] { 6.5, 3.0, 5.8, 2.2, 1, 0, 0 };//Iris-virginica
            //trainData[55] = new Double[] { 7.6, 3.0, 6.6, 2.1, 1, 0, 0 };//Iris-virginica
            //trainData[56] = new Double[] { 4.9, 2.5, 4.5, 1.7, 1, 0, 0 };//Iris-virginica
            //trainData[57] = new Double[] { 7.3, 2.9, 6.3, 1.8, 1, 0, 0 };//Iris-virginica
            //trainData[58] = new Double[] { 6.7, 2.5, 5.8, 1.8, 1, 0, 0 };//Iris-virginica
            //trainData[59] = new Double[] { 7.2, 3.6, 6.1, 2.5, 1, 0, 0 };//Iris-virginica
            //trainData[60] = new Double[] { 6.5, 3.2, 5.1, 2.0, 1, 0, 0 };//Iris-virginica
            //trainData[61] = new Double[] { 6.4, 2.7, 5.3, 1.9, 1, 0, 0 };//Iris-virginica
            //trainData[62] = new Double[] { 6.8, 3.0, 5.5, 2.1, 1, 0, 0 };//Iris-virginica
            //trainData[63] = new Double[] { 5.7, 2.5, 5.0, 2.0, 1, 0, 0 };//Iris-virginica
            //trainData[64] = new Double[] { 5.8, 2.8, 5.1, 2.4, 1, 0, 0 };//Iris-virginica
            //trainData[65] = new Double[] { 6.4, 3.2, 5.3, 2.3, 1, 0, 0 };//Iris-virginica
            //trainData[66] = new Double[] { 6.5, 3.0, 5.5, 1.8, 1, 0, 0 };//Iris-virginica
            //trainData[67] = new Double[] { 7.7, 3.8, 6.7, 2.2, 1, 0, 0 };//Iris-virginica
            //trainData[68] = new Double[] { 7.7, 2.6, 6.9, 2.3, 1, 0, 0 };//Iris-virginica
            //trainData[69] = new Double[] { 6.0, 2.2, 5.0, 1.5, 1, 0, 0 };//Iris-virginica
            //trainData[70] = new Double[] { 6.9, 3.2, 5.7, 2.3, 1, 0, 0 };//Iris-virginica
            //trainData[71] = new Double[] { 5.6, 2.8, 4.9, 2.0, 1, 0, 0 };//Iris-virginica
            //trainData[72] = new Double[] { 7.7, 2.8, 6.7, 2.0, 1, 0, 0 };//Iris-virginica
            //trainData[73] = new Double[] { 6.3, 2.7, 4.9, 1.8, 1, 0, 0 };//Iris-virginica
            //trainData[74] = new Double[] { 6.7, 3.3, 5.7, 2.1, 1, 0, 0 };//Iris-virginica

            //trainData[0] = new Double[] { 1.52101, 13.64, 4.49, 1.10, 71.78, 0.06, 8.75, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[1] = new Double[] { 1.51761, 13.89, 3.60, 1.36, 72.73, 0.48, 7.83, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[2] = new Double[] { 1.51618, 13.53, 3.55, 1.54, 72.99, 0.39, 7.78, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[3] = new Double[] { 1.51766, 13.21, 3.69, 1.29, 72.61, 0.57, 8.22, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[4] = new Double[] { 1.51742, 13.27, 3.62, 1.24, 73.08, 0.55, 8.07, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[5] = new Double[] { 1.51596, 12.79, 3.61, 1.62, 72.97, 0.64, 8.07, 0.00, 0.26, 0, 0, 0, 0, 0, 1 };
            //trainData[6] = new Double[] { 1.51743, 13.30, 3.60, 1.14, 73.09, 0.58, 8.17, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[7] = new Double[] { 1.51756, 13.15, 3.61, 1.05, 73.24, 0.57, 8.24, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[8] = new Double[] { 1.51918, 14.04, 3.58, 1.37, 72.08, 0.56, 8.30, 0.00, 0.00, 0, 0, 0, 0, 0, 1 };
            //trainData[9] = new Double[] { 1.51755, 13.00, 3.60, 1.36, 72.99, 0.57, 8.40, 0.00, 0.11, 0, 0, 0, 0, 0, 1 };
            //trainData[10] = new Double[] { 1.51574, 14.86, 3.67, 1.74, 71.87, 0.16, 7.36, 0.00, 0.12, 0, 0, 0, 0, 1, 0 };
            //trainData[11] = new Double[] { 1.51848, 13.64, 3.87, 1.27, 71.96, 0.54, 8.32, 0.00, 0.32, 0, 0, 0, 0, 1, 0 };
            //trainData[12] = new Double[] { 1.51593, 13.09, 3.59, 1.52, 73.10, 0.67, 7.83, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[13] = new Double[] { 1.51631, 13.34, 3.57, 1.57, 72.87, 0.61, 7.89, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[14] = new Double[] { 1.51596, 13.02, 3.56, 1.54, 73.11, 0.72, 7.90, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[15] = new Double[] { 1.51590, 13.02, 3.58, 1.51, 73.12, 0.69, 7.96, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[16] = new Double[] { 1.51645, 13.44, 3.61, 1.54, 72.39, 0.66, 8.03, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[17] = new Double[] { 1.51627, 13.00, 3.58, 1.54, 72.83, 0.61, 8.04, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[18] = new Double[] { 1.51613, 13.92, 3.52, 1.25, 72.88, 0.37, 7.94, 0.00, 0.14, 0, 0, 0, 0, 1, 0 };
            //trainData[19] = new Double[] { 1.51590, 12.82, 3.52, 1.90, 72.86, 0.69, 7.97, 0.00, 0.00, 0, 0, 0, 0, 1, 0 };
            //trainData[20] = new Double[] { 1.51769, 13.65, 3.66, 1.11, 72.77, 0.11, 8.60, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[21] = new Double[] { 1.51610, 13.33, 3.53, 1.34, 72.67, 0.56, 8.33, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[22] = new Double[] { 1.51670, 13.24, 3.57, 1.38, 72.70, 0.56, 8.44, 0.00, 0.10, 0, 0, 0, 1, 0, 0 };
            //trainData[23] = new Double[] { 1.51643, 12.16, 3.52, 1.35, 72.89, 0.57, 8.53, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[24] = new Double[] { 1.51665, 13.14, 3.45, 1.76, 72.48, 0.60, 8.38, 0.00, 0.17, 0, 0, 0, 1, 0, 0 };
            //trainData[25] = new Double[] { 1.52127, 14.32, 3.90, 0.83, 71.50, 0.00, 9.49, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[26] = new Double[] { 1.51779, 13.64, 3.65, 0.65, 73.00, 0.06, 8.93, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[27] = new Double[] { 1.51610, 13.42, 3.40, 1.22, 72.69, 0.59, 8.32, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[28] = new Double[] { 1.51694, 12.86, 3.58, 1.31, 72.61, 0.61, 8.79, 0.00, 0.00, 0, 0, 0, 1, 0, 0 };
            //trainData[29] = new Double[] { 1.51514, 14.01, 2.68, 3.50, 69.89, 1.68, 5.87, 2.20, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[30] = new Double[] { 1.51915, 12.73, 1.85, 1.86, 72.69, 0.60, 10.09, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[31] = new Double[] { 1.52171, 11.56, 1.88, 1.56, 72.86, 0.47, 11.41, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[32] = new Double[] { 1.52151, 11.03, 1.71, 1.56, 73.44, 0.58, 11.62, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[33] = new Double[] { 1.51969, 12.64, 0.00, 1.65, 73.75, 0.38, 11.53, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[34] = new Double[] { 1.51666, 12.86, 0.00, 1.83, 73.88, 0.97, 10.17, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[35] = new Double[] { 1.51994, 13.27, 0.00, 1.76, 73.03, 0.47, 11.32, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[36] = new Double[] { 1.52369, 13.44, 0.00, 1.58, 72.22, 0.32, 12.24, 0.00, 0.00, 0, 0, 1, 0, 0, 0 };
            //trainData[37] = new Double[] { 1.51905, 14.00, 2.39, 1.56, 72.37, 0.00, 9.57, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[38] = new Double[] { 1.51937, 13.79, 2.41, 1.19, 72.76, 0.00, 9.77, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[39] = new Double[] { 1.51829, 14.46, 2.24, 1.62, 72.38, 0.00, 9.26, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[40] = new Double[] { 1.51852, 14.09, 2.19, 1.66, 72.67, 0.00, 9.32, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[41] = new Double[] { 1.51299, 14.40, 1.74, 1.54, 74.55, 0.00, 7.59, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[42] = new Double[] { 1.51888, 14.99, 0.78, 1.74, 72.50, 0.00, 9.95, 0.00, 0.00, 0, 1, 0, 0, 0, 0 };
            //trainData[43] = new Double[] { 1.51131, 13.69, 3.20, 1.81, 72.81, 1.76, 5.43, 1.19, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[44] = new Double[] { 1.51838, 14.32, 3.26, 2.22, 71.25, 1.46, 5.79, 1.63, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[45] = new Double[] { 1.52315, 13.44, 3.34, 1.23, 72.38, 0.60, 8.83, 0.00, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[46] = new Double[] { 1.52247, 14.86, 2.20, 2.06, 70.26, 0.76, 9.76, 0.00, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[47] = new Double[] { 1.52365, 15.79, 1.83, 1.31, 70.43, 0.31, 8.61, 1.68, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[48] = new Double[] { 1.51613, 13.88, 1.78, 1.79, 73.10, 0.00, 8.67, 0.76, 0.00, 1, 0, 0, 0, 0, 0 };
            //trainData[49] = new Double[] { 1.51602, 14.85, 0.00, 2.38, 73.28, 0.00, 8.76, 0.64, 0.09, 1, 0, 0, 0, 0, 0 };
            //trainData[50] = new Double[] { 1.51623, 14.20, 0.00, 2.79, 73.46, 0.04, 9.04, 0.40, 0.09, 1, 0, 0, 0, 0, 0 };
            //trainData[51] = new Double[] { 1.51719, 14.75, 0.00, 2.00, 73.02, 0.00, 8.53, 1.59, 0.08, 1, 0, 0, 0, 0, 0 };
            //trainData[52] = new Double[] { 1.51683, 14.56, 0.00, 1.98, 73.29, 0.00, 8.52, 1.57, 0.07, 1, 0, 0, 0, 0, 0 };


            //trainData[0] = new Double[] { 1, 0, 1, 0.06655, 1, -0.18388, 1, -0.27320, 1, -0.43107, 1, -0.41349, 0.96232, -0.51874, 0.90711, -0.59017, 0.89230, -0.66474, 0.69876, -0.70997, 0.70645, -0.76320, 0.63081, -0.80544, 0.55867, -0.89128, 0.47211, -0.86500, 0.40303, -0.83675, 0.30996, -0.89093, 0.22995, -0.89158, 1, 0 };
            //trainData[1] = new Double[] { 1, 0, 1, -0.54210, 1, -1, 1, -1, 1, 0.36217, 1, -0.41119, 1, 1, 1, -1, 1, -0.29354, 1, -0.93599, 1, 1, 1, 1, 1, -0.40888, 1, -0.62745, 1, -1, 1, -1, 1, -1, 0, 1 };
            //trainData[2] = new Double[] { 1, 0, 1, -0.16316, 1, -0.10169, 0.99999, -0.15197, 1, -0.19277, 0.94055, -0.35151, 0.95735, -0.29785, 0.93719, -0.34412, 0.94486, -0.28106, 0.90137, -0.43383, 0.86043, -0.47308, 0.82987, -0.51220, 0.84080, -0.47137, 0.76224, -0.58370, 0.65723, -0.68794, 0.68714, -0.64537, 0.64727, -0.67226, 1, 0 };
            //trainData[3] = new Double[] { 1, 0, 1, -0.86701, 1, 0.22280, 0.85492, -0.39896, 1, -0.12090, 1, 0.35147, 1, 0.07772, 1, -0.14767, 1, -1, 1, -1, 0.61831, 0.15803, 1, 0.62349, 1, -0.17012, 1, 0.35924, 1, -0.66494, 1, 0.88428, 1, -0.18826, 0, 1 };
            //trainData[4] = new Double[] { 1, 0, 1, 0.07380, 1, 0.03420, 1, -0.05563, 1, 0.08764, 1, 0.19651, 1, 0.20328, 1, 0.12785, 1, 0.10561, 1, 0.27087, 1, 0.44758, 1, 0.41750, 1, 0.20033, 1, 0.36743, 0.95603, 0.48641, 1, 0.32492, 1, 0.46712, 0, 1 };
            //trainData[5] = new Double[] { 1, 0, 0.50932, -0.93996, 1, 0.26708, -0.03520, -1, 1, -1, 0.43685, -1, 0, 0, -1, -0.34265, -0.37681, 0.03623, 1, -1, 0, 0, 0, 0, -0.16253, 0.92236, 0.39752, 0.26501, 0, 0, 1, 0.23188, 0, 0, 0, 1 };
            //trainData[6] = new Double[] { 1, 0, 0.99645, 0.06468, 1, -0.01236, 0.97811, 0.02498, 0.96112, 0.02312, 0.99274, 0.07808, 0.89323, 0.10346, 0.94212, 0.05269, 0.88809, 0.11120, 0.86104, 0.08631, 0.81633, 0.11830, 0.83668, 0.14442, 0.81329, 0.13412, 0.79476, 0.13638, 0.79110, 0.15379, 0.77122, 0.15930, 0.70941, 0.12015, 1, 0 };
            //trainData[7] = new Double[] { 0, 0, 0, 0, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 0, 1 };
            //trainData[8] = new Double[] { 1, 0, 0.67065, 0.02528, 0.66626, 0.05031, 0.57197, 0.18761, 0.08776, 0.34081, 0.63621, 0.12131, 0.62099, 0.14285, 0.78637, 0.10976, 0.58373, 0.18151, 0.14395, 0.41224, 0.53888, 0.21326, 0.51420, 0.22625, 0.48838, 0.23724, 0.46167, 0.24618, 0.43433, 0.25306, 0.40663, 0.25792, 1, 0.33036, 1, 0 };
            //trainData[9] = new Double[] { 0, 0, 1, -1, 0, 0, 0, 0, 1, 1, 1, -1, -0.71875, 1, 0, 0, -1, 1, 1, 1, -1, 1, 1, 0.56250, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 0, 1 };
            //trainData[10] = new Double[] { 1, 0, 1, -0.00612, 1, -0.09834, 1, -0.07649, 1, -0.10605, 1, -0.11073, 1, -0.39489, 1, -0.15616, 0.92124, -0.31884, 0.86473, -0.34534, 0.91693, -0.44072, 0.96060, -0.46866, 0.81874, -0.40372, 0.82681, -0.42231, 0.75784, -0.38231, 0.80448, -0.40575, 0.74354, -0.45039, 1, 0 };
            //trainData[11] = new Double[] { 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, -1, 1, 0, 0, 0, 0, 1, -1, -1, 1, -1, 1, -1, 1, 0, 1 };
            //trainData[12] = new Double[] { 1, 0, 0.96071, 0.07088, 1, 0.04296, 1, 0.09313, 0.90169, -0.05144, 0.89263, 0.02580, 0.83250, -0.06142, 0.87534, 0.09831, 0.76544, 0.00280, 0.75206, -0.05295, 0.65961, -0.07905, 0.64158, -0.05929, 0.55677, -0.07705, 0.58051, -0.02205, 0.49664, -0.01251, 0.51310, -0.00015, 0.52099, -0.00182, 1, 0 };
            //trainData[13] = new Double[] { 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 1, 1, 0, 0, 0, 0, 1, -1, -1, 1, 1, 1, 0, 0, -1, -1, 1, -1, 1, 1, -1, 1, 0, 0, 0, 1 };
            //trainData[14] = new Double[] { 1, 0, 1, -0.06182, 1, 0.02942, 1, -0.05131, 1, -0.01707, 1, -0.11726, 0.84493, -0.05202, 0.93392, -0.06598, 0.69170, -0.07379, 0.65731, -0.20367, 0.94910, -0.31558, 0.80852, -0.31654, 0.84932, -0.34838, 0.72529, -0.29174, 0.73094, -0.38576, 0.54356, -0.26284, 0.64207, -0.39487, 1, 0 };
            //trainData[15] = new Double[] { 1, 0, 1, 0.57820, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -0.62796, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 0, 1 };
            //trainData[16] = new Double[] { 1, 0, 1, -0.08714, 1, -0.17263, 0.86635, -0.81779, 0.94817, 0.61053, 0.95473, -0.41382, 0.88486, -0.31736, 0.87937, -0.23433, 0.81051, -0.62180, 0.12245, -1, 0.90284, 0.11053, 0.62357, -0.78547, 0.55389, -0.82868, 0.48136, -0.86583, 0.40650, -0.89674, 0.32984, -0.92128, -0.13341, -1, 1, 0 };
            //trainData[17] = new Double[] { 0, 0, -1, -1, 0, 0, -1, 1, 1, -0.37500, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1, 1, -1, 0, 0, 1, -1, -1, 1, -1, -1, 0, 0, -1, 1, 0, 1 };
            //trainData[18] = new Double[] { 1, 0, 1, 0.08380, 1, 0.17387, 1, -0.13308, 0.98172, 0.64520, 1, 0.47904, 1, 0.59113, 1, 0.70758, 1, 0.82777, 1, 0.95099, 1, 1, 0.98042, 1, 0.91624, 1, 0.83899, 1, 0.74822, 1, 0.64358, 1, 0.52479, 1, 1, 0 };
            //trainData[19] = new Double[] { 0, 0, -1, -1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 0, 1 };
            //trainData[20] = new Double[] { 1, 0, 1, -0.14236, 1, -0.16256, 1, -0.23656, 1, -0.07514, 1, -0.25010, 1, -0.26161, 1, -0.21975, 1, -0.38606, 1, -0.46162, 1, -0.35519, 1, -0.59661, 1, -0.47643, 0.98820, -0.49687, 1, -0.75820, 1, -0.75761, 1, -0.84437, 1, 0 };
            //trainData[21] = new Double[] { 1, 0, 1, -1, 1, 1, 1, -1, 1, -1, 1, -1, 1, -0.01840, 1, -1, 1, 1, 1, -0.85583, 1, 1, 1, -1, 0, 0, 1, 1, 1, -0.79141, 1, 1, 1, 1, 0, 1 };
            //trainData[22] = new Double[] { 1, 0, 0.88208, -0.14639, 0.93408, -0.11057, 0.92100, -0.16450, 0.88307, -0.17036, 0.88462, -0.31809, 0.85269, -0.31463, 0.82116, -0.35924, 0.80681, -0.33632, 0.75243, -0.47022, 0.70555, -0.47153, 0.66150, -0.50085, 0.61297, -0.48086, 0.56804, -0.54629, 0.50179, -0.59854, 0.47075, -0.57377, 0.42189, -0.58086, 1, 0 };
            //trainData[23] = new Double[] { 1, 0, 0.71253, -0.02595, 0.41287, -0.23067, 0.98019, -0.09473, 0.99709, -0.10236, 1, -0.10951, 0.58965, 1, 0.83726, -1, 0.82270, -0.17863, 0.80760, -0.28257, -0.25914, 0.92730, 0.51933, 0.05456, 0.65493, -0.20392, 0.93124, -0.41307, 0.63811, -0.21901, 0.86136, -0.87354, -0.23186, -1, 0, 1 };
            //trainData[24] = new Double[] { 1, 0, 1, -0.15899, 0.72314, 0.27686, 0.83443, -0.58388, 1, -0.28207, 1, -0.49863, 0.79962, -0.12527, 0.76837, 0.14638, 1, 0.39337, 1, 0.26590, 0.96354, -0.01891, 0.92599, -0.91338, 1, 0.14803, 1, -0.11582, 1, -0.11129, 1, 0.53372, 1, -0.57758, 1, 0 };
            //trainData[25] = new Double[] { 1, 0, 0.66161, -1, 1, 1, 1, -0.67321, 0.80893, -0.40446, 1, -1, 1, -0.89375, 1, 0.73393, 0.17589, 0.70982, 1, 0.78036, 1, 0.85268, 1, -1, 1, 0.85357, 1, -0.08571, 0.95982, -0.36250, 1, 0.65268, 1, 0.34732, 0, 1 };
            //trainData[26] = new Double[] { 1, 0, 1, 0.00433, 1, -0.01209, 1, -0.02960, 1, -0.07014, 0.97839, -0.06256, 1, -0.06544, 0.97261, -0.07917, 0.92561, -0.13665, 0.94184, -0.14327, 0.99589, -0.14248, 0.94815, -0.13565, 0.89469, -0.20851, 0.89067, -0.17909, 0.85644, -0.18552, 0.83777, -0.20101, 0.83867, -0.20766, 1, 0 };
            //trainData[27] = new Double[] { 0, 0, 1, 1, 1, -1, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 0, 0, 0, 1 };
            //trainData[28] = new Double[] { 1, 0, 0.91241, 0.04347, 0.94191, 0.02280, 0.94705, 0.05345, 0.93582, 0.01321, 0.91911, 0.06348, 0.92766, 0.12067, 0.92048, 0.06211, 0.88899, 0.12722, 0.83744, 0.14439, 0.80983, 0.11849, 0.77041, 0.14222, 0.75755, 0.11299, 0.73550, 0.13282, 0.66387, 0.15300, 0.70925, 0.10754, 0.65258, 0.11447, 1, 0 };
            //trainData[29] = new Double[] { 1, 0, 1, 0.02461, 0.99672, 0.04861, 0.97545, 0.07143, 0.61745, -1, 0.91036, 0.11147, 0.88462, 0.53640, 0.82077, 0.14137, 0.76929, 0.15189, 1, 0.41003, 0.65850, 0.16371, 0.60138, 0.16516, 0.54446, 0.16390, 0.48867, 0.16019, 0.43481, 0.15436, 0.38352, 0.14677, 1, 1, 0, 1 };
            //trainData[30] = new Double[] { 1, 0, 1, 0.06538, 1, 0.20746, 1, 0.26281, 0.93051, 0.32213, 0.86773, 0.39039, 0.75474, 0.50082, 0.79555, 0.52321, 0.65954, 0.60756, 0.57619, 0.62999, 0.47807, 0.67135, 0.40553, 0.68840, 0.34384, 0.72082, 0.27712, 0.72386, 0.19296, 0.70682, 0.11372, 0.72688, 0.06990, 0.71444, 1, 0 };
            //trainData[31] = new Double[] { 1, 0, -1, -1, 1, 1, 1, -0.14375, 0, 0, -1, 1, 1, 1, 0.17917, -1, -1, -1, 0.08750, -1, 1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 0, 0, 0, 1 };
            //trainData[32] = new Double[] { 1, 0, 0.90932, 0.08791, 0.86528, 0.16888, 1, 0.16598, 0.55187, 0.68154, 0.70207, 0.36719, 0.16286, 0.42739, 0.57620, 0.46086, 0.51067, 0.49618, 0.31639, 0.12967, 0.37824, 0.54462, 0.31274, 0.55826, 0.24856, 0.56527, 0.18626, 0.56605, 0.12635, 0.56101, 0.06927, 0.55061, 0.12137, 0.67739, 1, 0 };
            //trainData[33] = new Double[] { 1, 0, -0.64286, -1, 1, 0.82857, 1, -1, 1, -0.23393, 1, 0.96161, 1, -0.37679, 1, -1, 1, 0.13839, 1, -1, 1, -0.03393, -0.84286, 1, 0.53750, 0.85714, 1, 1, 1, -1, 1, -1, 1, -1, 0, 1 };
            //trainData[34] = new Double[] { 1, 0, 0.99025, -0.05785, 0.99793, -0.13009, 0.98663, -0.19430, 0.99374, -0.25843, 0.92738, -0.30130, 0.92651, -0.37965, 0.89812, -0.43796, 0.84922, -0.52064, 0.87433, -0.57075, 0.79016, -0.59839, 0.74725, -0.64615, 0.68282, -0.68479, 0.65247, -0.73174, 0.61010, -0.75353, 0.54752, -0.80278, 0.49195, -0.83245, 1, 0 };
            //trainData[35] = new Double[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, -0.37500, -1, -1, -1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 0, 0, 0, 0, 1 };
            //trainData[36] = new Double[] { 1, 0, 0.99539, -0.05889, 0.85243, 0.02306, 0.83398, -0.37708, 1, 0.03760, 0.85243, -0.17755, 0.59755, -0.44945, 0.60536, -0.38223, 0.84356, -0.38542, 0.58212, -0.32192, 0.56971, -0.29674, 0.36946, -0.47357, 0.56811, -0.51171, 0.41078, -0.46168, 0.21266, -0.34090, 0.42267, -0.54487, 0.18641, -0.45300, 1, 0 };
            //trainData[37] = new Double[] { 1, 0, 1, -0.18829, 0.93035, -0.36156, -0.10868, -0.93597, 1, -0.04549, 0.50874, -0.67743, 0.34432, -0.69707, -0.51685, -0.97515, 0.05499, -0.62237, 0.33109, -1, -0.13151, -0.45300, -0.18056, -0.35734, -0.20332, -0.26569, -0.20468, -0.18401, -0.19040, -0.11593, -0.16626, -0.06288, -0.13738, -0.02447, 0, 1 };
            //trainData[38] = new Double[] { 1, 0, 1, -0.03365, 1, 0.00485, 1, -0.12062, 0.88965, 0.01198, 0.73082, 0.05346, 0.85443, 0.00827, 0.54591, 0.00299, 0.83775, -0.13644, 0.75535, -0.08540, 0.70887, -0.27502, 0.43385, -0.12062, 0.57528, -0.40220, 0.58984, -0.22145, 0.43100, -0.17365, 0.60436, -0.24180, 0.56045, -0.38238, 1, 0 };
            //trainData[39] = new Double[] { 1, 0, 1, -0.45161, 1, 1, 0.71216, -1, 0, 0, 0, 0, 0, 0, -1, 0.14516, 0.54094, -0.39330, -1, -0.54467, -0.69975, 1, 0, 0, 1, 0.90695, 0.51613, 1, 1, -0.20099, 0.25682, 1, -0.32382, 1, 0, 1 };
            //trainData[40] = new Double[] { 1, 0, 1, -0.02401, 0.94140, 0.06531, 0.92106, -0.23255, 0.77152, -0.16399, 0.52798, -0.20275, 0.56409, -0.00712, 0.34395, -0.27457, 0.52940, -0.21780, 0.45107, -0.17813, 0.05982, -0.35575, 0.02309, -0.52879, 0.03286, -0.65158, 0.13290, -0.53206, 0.02431, -0.62197, -0.05707, -0.59573, -0.04608, -0.65697, 1, 0 };
            //trainData[41] = new Double[] { 1, 0, 0.02337, -0.00592, -0.09924, -0.11949, -0.00763, -0.11824, 0.14706, 0.06637, 0.03786, -0.06302, 0, 0, -0.04572, -0.15540, -0.00343, -0.10196, -0.11575, -0.05414, 0.01838, 0.03669, 0.01519, 0.00888, 0.03513, -0.01535, -0.03240, 0.09223, -0.07859, 0.00732, 0, 0, -0.00039, 0.12011, 0, 1 };
            //trainData[42] = new Double[] { 1, 0, 0.97588, -0.10602, 0.94601, -0.20800, 0.92806, -0.28350, 0.85996, -0.27342, 0.79766, -0.47929, 0.78225, -0.50764, 0.74628, -0.61436, 0.57945, -0.68086, 0.37852, -0.73641, 0.36324, -0.76562, 0.31898, -0.79753, 0.22792, -0.81634, 0.13659, -0.82510, 0.04606, -0.82395, -0.04262, -0.81318, -0.13832, -0.80975, 1, 0 };
            //trainData[43] = new Double[] { 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 1, 1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1 };
            //trainData[44] = new Double[] { 1, 0, 0.96355, -0.07198, 1, -0.14333, 1, -0.21313, 1, -0.36174, 0.92570, -0.43569, 0.94510, -0.40668, 0.90392, -0.46381, 0.98305, -0.35257, 0.84537, -0.66020, 0.75346, -0.60589, 0.69637, -0.64225, 0.85106, -0.65440, 0.57577, -0.69712, 0.25435, -0.63919, 0.45114, -0.72779, 0.38895, -0.73420, 1, 0 };
            
            


            //double[][] testData = new double[39][];

          

            ////testData[0] = new double[] { 5.0, 3.0, 1.6, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[1] = new double[] { 5.0, 3.4, 1.6, 0.4, 0, 0, 1 };//Iris-setosa
            ////testData[2] = new double[] { 5.2, 3.5, 1.5, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[3] = new double[] { 5.2, 3.4, 1.4, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[4] = new double[] { 4.7, 3.2, 1.6, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[5] = new double[] { 4.8, 3.1, 1.6, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[6] = new double[] { 5.4, 3.4, 1.5, 0.4, 0, 0, 1 };//Iris-setosa
            ////testData[7] = new double[] { 5.2, 4.1, 1.5, 0.1, 0, 0, 1 };//Iris-setosa
            ////testData[8] = new double[] { 5.5, 4.2, 1.4, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[9] = new double[] { 4.9, 3.1, 1.5, 0.1, 0, 0, 1 };//Iris-setosa
            ////testData[10] = new double[] { 5.0, 3.2, 1.2, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[11] = new double[] { 5.5, 3.5, 1.3, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[12] = new double[] { 4.9, 3.1, 1.5, 0.1, 0, 0, 1 };//Iris-setosa
            ////testData[13] = new double[] { 4.4, 3.0, 1.3, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[14] = new double[] { 5.1, 3.4, 1.5, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[15] = new double[] { 5.0, 3.5, 1.3, 0.3, 0, 0, 1 };//Iris-setosa
            ////testData[16] = new double[] { 4.5, 2.3, 1.3, 0.3, 0, 0, 1 };//Iris-setosa
            ////testData[17] = new double[] { 4.4, 3.2, 1.3, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[18] = new double[] { 5.0, 3.5, 1.6, 0.6, 0, 0, 1 };//Iris-setosa
            ////testData[19] = new double[] { 5.1, 3.8, 1.9, 0.4, 0, 0, 1 };//Iris-setosa
            ////testData[20] = new double[] { 4.8, 3.0, 1.4, 0.3, 0, 0, 1 };//Iris-setosa
            ////testData[21] = new double[] { 5.1, 3.8, 1.6, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[22] = new double[] { 4.6, 3.2, 1.4, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[23] = new double[] { 5.3, 3.7, 1.5, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[24] = new double[] { 5.0, 3.3, 1.4, 0.2, 0, 0, 1 };//Iris-setosa
            ////testData[25] = new double[] { 6.6, 3.0, 4.4, 1.4, 0, 1, 0 };//Iris-versicolor
            ////testData[26] = new double[] { 6.8, 2.8, 4.8, 1.4, 0, 1, 0 };//Iris-versicolor
            ////testData[27] = new double[] { 6.7, 3.0, 5.0, 1.7, 0, 1, 0 };//Iris-versicolor
            ////testData[28] = new double[] { 6.0, 2.9, 4.5, 1.5, 0, 1, 0 };//Iris-versicolor
            ////testData[29] = new double[] { 5.7, 2.6, 3.5, 1.0, 0, 1, 0 };//Iris-versicolor
            ////testData[30] = new double[] { 5.5, 2.4, 3.8, 1.1, 0, 1, 0 };//Iris-versicolor
            ////testData[31] = new double[] { 5.5, 2.4, 3.7, 1.0, 0, 1, 0 };//Iris-versicolor
            ////testData[32] = new double[] { 5.8, 2.7, 3.9, 1.2, 0, 1, 0 };//Iris-versicolor
            ////testData[33] = new double[] { 6.0, 2.7, 5.1, 1.6, 0, 1, 0 };//Iris-versicolor
            ////testData[34] = new double[] { 5.4, 3.0, 4.5, 1.5, 0, 1, 0 };//Iris-versicolor
            ////testData[35] = new double[] { 6.0, 3.4, 4.5, 1.6, 0, 1, 0 };//Iris-versicolor
            ////testData[36] = new double[] { 6.7, 3.1, 4.7, 1.5, 0, 1, 0 };//Iris-versicolor
            ////testData[37] = new double[] { 6.3, 2.3, 4.4, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[38] = new double[] { 5.6, 3.0, 4.1, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[39] = new double[] { 5.5, 2.5, 4.0, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[40] = new double[] { 5.5, 2.6, 4.4, 1.2, 0, 1, 0 };//Iris-versicolor
            ////testData[41] = new double[] { 6.1, 3.0, 4.6, 1.4, 0, 1, 0 };//Iris-versicolor
            ////testData[42] = new double[] { 5.8, 2.6, 4.0, 1.2, 0, 1, 0 };//Iris-versicolor
            ////testData[43] = new double[] { 5.0, 2.3, 3.3, 1.0, 0, 1, 0 };//Iris-versicolor
            ////testData[44] = new double[] { 5.6, 2.7, 4.2, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[45] = new double[] { 5.7, 3.0, 4.2, 1.2, 0, 1, 0 };//Iris-versicolor
            ////testData[46] = new double[] { 5.7, 2.9, 4.2, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[47] = new double[] { 6.2, 2.9, 4.3, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[48] = new double[] { 5.1, 2.5, 3.0, 1.1, 0, 1, 0 };//Iris-versicolor
            ////testData[49] = new double[] { 5.7, 2.8, 4.1, 1.3, 0, 1, 0 };//Iris-versicolor
            ////testData[50] = new double[] { 7.2, 3.2, 6.0, 1.8, 1, 0, 0 };//Iris-virginica
            ////testData[51] = new double[] { 6.2, 2.8, 4.8, 1.8, 1, 0, 0 };//Iris-virginica
            ////testData[52] = new double[] { 6.1, 3.0, 4.9, 1.8, 1, 0, 0 };//Iris-virginica
            ////testData[53] = new double[] { 6.4, 2.8, 5.6, 2.1, 1, 0, 0 };//Iris-virginica
            ////testData[54] = new double[] { 7.2, 3.0, 5.8, 1.6, 1, 0, 0 };//Iris-virginica
            ////testData[55] = new double[] { 7.4, 2.8, 6.1, 1.9, 1, 0, 0 };//Iris-virginica
            ////testData[56] = new double[] { 7.9, 3.8, 6.4, 2.0, 1, 0, 0 };//Iris-virginica
            ////testData[57] = new double[] { 6.4, 2.8, 5.6, 2.2, 1, 0, 0 };//Iris-virginica
            ////testData[58] = new double[] { 6.3, 2.8, 5.1, 1.5, 1, 0, 0 };//Iris-virginica
            ////testData[59] = new double[] { 6.1, 2.6, 5.6, 1.4, 1, 0, 0 };//Iris-virginica
            ////testData[60] = new double[] { 7.7, 3.0, 6.1, 2.3, 1, 0, 0 };//Iris-virginica
            ////testData[61] = new double[] { 6.3, 3.4, 5.6, 2.4, 1, 0, 0 };//Iris-virginica
            ////testData[62] = new double[] { 6.4, 3.1, 5.5, 1.8, 1, 0, 0 };//Iris-virginica
            ////testData[63] = new double[] { 6.0, 3.0, 4.8, 1.8, 1, 0, 0 };//Iris-virginica
            ////testData[64] = new double[] { 6.9, 3.1, 5.4, 2.1, 1, 0, 0 };//Iris-virginica
            ////testData[65] = new double[] { 6.7, 3.1, 5.6, 2.4, 1, 0, 0 };//Iris-virginica
            ////testData[66] = new double[] { 6.9, 3.1, 5.1, 2.3, 1, 0, 0 };//Iris-virginica
            ////testData[67] = new double[] { 5.8, 2.7, 5.1, 1.9, 1, 0, 0 };//Iris-virginica
            ////testData[68] = new double[] { 6.8, 3.2, 5.9, 2.3, 1, 0, 0 };//Iris-virginica
            ////testData[69] = new double[] { 6.7, 3.3, 5.7, 2.5, 1, 0, 0 };//Iris-virginica
            ////testData[70] = new double[] { 6.7, 3.0, 5.2, 2.3, 1, 0, 0 };//Iris-virginica
            ////testData[71] = new double[] { 6.3, 2.5, 5.0, 1.9, 1, 0, 0 };//Iris-virginica
            ////testData[72] = new double[] { 6.5, 3.0, 5.2, 2.0, 1, 0, 0 };//Iris-virginica
            ////testData[73] = new double[] { 6.2, 3.4, 5.4, 2.3, 1, 0, 0 };//Iris-virginica
            ////testData[74] = new double[] { 5.9, 3.0, 5.1, 1.8, 1, 0, 0 };//Iris-virginica

            //testData[0] = new double[] { 1, 0, 1, -0.03730, 1, -0.07383, 0.99601, -0.11039, 0.99838, -0.09931, 0.98941, -0.13814, 0.96674, -0.21695, 0.95288, -0.25099, 0.91236, -0.34400, 0.90581, -0.32152, 0.89991, -0.34691, 0.87874, -0.37643, 0.86213, -0.42990, 0.83172, -0.43122, 0.81433, -0.42593, 0.77919, -0.47977, 0.75115, -0.50152, 1, 0 };
            //testData[1] = new double[] { 1, 0, 0.94598, -0.02685, -1, 0.26131, -0.36393, 0.35639, 0.69258, -0.63427, 1, -0.03353, -0.29020, -0.00550, -0.54852, 0.15452, 0.91921, -0.46270, 1, -0.50424, -0.29735, -0.31454, -0.73864, 0.37361, 0.83872, -0.46734, 0.52208, -0.58130, 1, -0.61393, -0.09634, 0.20477, -0.06117, 0.41913, 0, 1 };
            //testData[2] = new double[] { 1, 0, 0.98166, 0.00874, 0.98103, -0.03818, 0.97565, -0.05699, 0.95947, -0.06971, 0.99004, -0.04507, 0.94713, -0.11102, 0.93369, -0.12790, 0.94217, -0.11583, 0.79682, -0.19200, 0.88274, -0.17387, 0.86257, -0.18739, 0.88487, -0.19689, 0.81813, -0.21136, 0.78546, -0.23864, 0.76911, -0.23095, 0.74323, -0.23902, 1, 0 };
            //testData[3] = new double[] { 1, 0, 0, 0, 1, 0.51724, 0, 0, 0.10991, -1, 0, 0, 0, 0, -1, -0.22414, -0.55711, -0.83297, 0.76940, 0.63147, 0, 0, 0.53448, 0.35668, -0.90302, 0.44828, 1, -1, -1, 0.81573, 0, 0, 0, 0, 0, 1 };
            //testData[4] = new double[] { 1, 0, 0.84134, -0.18362, 0.43644, 0.02919, 0.93421, -0.00267, 0.87947, 0.13795, 0.81121, -0.01789, 0.88559, 0.54991, 0.91714, -0.57486, 0.75000, -0.29520, 0.86676, -0.20104, 1, 1, 0.46610, -0.16290, 0.90066, -0.02778, 0.93358, -0.01158, 0.61582, -0.32298, 0.84463, -0.25706, 0.93323, -0.01425, 1, 0 };
            //testData[5] = new double[] { 0, 0, 1, 1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 0, 0, 1, -1, 1, -1, 1, 1, -1, -1, 0, 0, 0, 0, 0, 1 };
            //testData[6] = new double[] { 1, 0, 1, 1, 1, 1, 0.91010, 1, -0.26970, 1, -0.83152, 1, -1, 1, -1, 0.72526, -1, -0.57779, -1, -0.42052, -1, -1, -0.52838, -1, 0.90014, -1, 1, -1, 1, -1, 1, -0.34686, 1, 0.34845, 1, 0 };
            //testData[7] = new double[] { 1, 0, -0.67935, -1, -1, 1, 1, 0.63317, 0.03515, -1, -1, -1, 1, 1, 0.88683, -1, -1, 1, 0.83840, 1, 1, -1, -1, -1, -0.18856, 1, 1, -1, -1, -1, -1, 1, 1, 0.33611, 0, 1 };
            //testData[8] = new double[] { 1, 0, 0.95659, 0.08143, 0.97487, -0.05667, 0.97165, -0.08484, 0.96097, -0.06561, 0.94717, 0.01279, 0.95436, -0.16795, 0.94612, -0.19497, 0.99630, -0.32268, 0.90343, -0.35902, 0.91428, -0.27316, 0.90140, -0.29807, 0.99899, -0.40747, 0.87244, -0.34586, 0.92059, -0.30619, 0.83951, -0.39061, 0.82166, -0.41173, 1, 0 };
            //testData[9] = new double[] { 1, 0, 0.08333, -0.20685, -1, 1, -1, 1, 0.71875, 0.47173, -0.82143, -0.62723, -1, -1, -1, 1, -0.02753, 0.59152, -0.42113, -0.42113, -0.74628, -1, -1, -0.46801, -1, 0.23810, 1, -1, -1, -0.38914, -1, -1, -1, 0.61458, 0, 1 };
            //testData[10] = new double[] { 1, 0, 1, -0.02259, 1, -0.04494, 1, -0.06682, 1, -0.08799, 1, 0.56173, 1, -0.12738, 1, -0.14522, 1, 0.32407, 1, -0.17639, 0.99484, -0.18949, 0.95601, -0.20081, 1, -0.92284, 0.87280, -0.21793, 0.82920, -0.22370, 0.78479, -0.22765, 0.73992, -0.22981, 1, 0 };
            //testData[11] = new double[] { 0, 0, -1, 1, 1, -1, -1, 1, 0, 0, 1, 1, -1, -0.18750, 1, 1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 0, 0, -1, -1, 0, 1 };
            //testData[12] = new double[] { 1, 0, 1, 0.05812, 0.94525, 0.07418, 0.99952, 0.13231, 1, -0.01911, 0.94846, 0.07033, 0.95713, 0.14644, 0.94862, 0.11224, 0.90896, 0.20119, 0.96741, 0.16265, 0.99695, 0.14258, 0.90784, 0.16410, 0.91667, 0.22431, 0.88423, 0.23571, 0.88568, 0.22511, 0.78324, 0.29576, 0.83574, 0.31166, 1, 0 };
            //testData[13] = new double[] { 1, 0, 0.17188, -1, -1, 1, 0, 0, 0, 0, -1, 1, 0, 0, -0.61354, -0.67708, 0.80521, 0.36146, 0.51979, 0.14375, 0, 0, -1, -0.27083, -0.84792, 0.96250, 1, 1, -1, 0.67708, 0, 0, 0, 0, 0, 1 };
            //testData[14] = new double[] { 1, 0, 1, 0.09771, 1, 0.12197, 1, 0.22574, 0.98602, 0.09237, 0.94930, 0.19211, 0.92992, 0.24288, 0.89241, 0.28343, 0.85529, 0.26721, 0.83656, 0.33129, 0.83393, 0.31698, 0.74829, 0.39597, 0.76193, 0.34658, 0.68452, 0.42746, 0.62764, 0.46031, 0.56791, 0.47033, 0.54252, 0.50903, 1, 0 };
            //testData[15] = new double[] { 1, 0, 0.01667, -0.35625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.12292, -0.55000, 0.22813, 0.82813, 1, -0.42292, 0, 0, 0.08333, -1, -0.10625, -0.16667, 1, -0.76667, -1, 0.18854, 0, 0, 1, -0.27292, 0, 1 };
            //testData[16] = new double[] { 1, 0, 1, 0.16801, 0.99352, 0.16334, 0.94616, 0.33347, 0.91759, 0.22610, 0.91408, 0.37107, 0.84250, 0.46899, 0.81011, 0.49225, 0.78473, 0.48311, 0.65091, 0.56977, 0.56553, 0.58071, 0.55586, 0.64720, 0.48311, 0.55236, 0.43317, 0.69129, 0.35684, 0.76147, 0.33921, 0.66844, 0.22101, 0.78685, 1, 0 };
            //testData[17] = new double[] { 1, 0, 0.63816, 1, 0.20833, -1, 1, 1, 0.87719, 0.30921, -0.66886, 1, -0.05921, 0.58772, 0.01754, 0.05044, -0.51535, -1, 0.14254, -0.03289, 0.32675, -0.43860, -1, 1, 0.80921, -1, 1, -0.06140, 1, 1, 0.20614, -1, 1, 1, 0, 1 };
            //testData[18] = new double[] { 1, 0, 1, -0.41457, 1, 0.76131, 0.87060, 0.18593, 1, -0.09925, 0.93844, 0.47990, 0.65452, -0.16080, 1, 0.00879, 0.97613, -0.50126, 0.80025, -0.24497, 0.88065, -0.19095, 1, -0.12312, 0.93593, 0.10678, 0.92890, -0.07249, 1, -0.27387, 0.43970, 0.19849, 0.51382, -0.05402, 1, 0 };
            //testData[19] = new double[] { 1, 0, 0.84783, 0.10598, 1, 0.39130, 1, -1, 0.66938, 0.08424, 1, 0.27038, 1, 0.60598, 1, 0.35507, 1, 0.02672, 0.58424, -0.43025, 1, 0.63496, 0.89130, 0.26585, 0.91033, -0.33333, 1, 0.15942, 0.37681, -0.01947, 1, 0.22464, 1, 0.37409, 0, 1 };
            //testData[20] = new double[] { 1, 0, 1, 0.28046, 1, 0.02477, 1, 0.07764, 1, 0.04317, 0.98762, 0.33266, 1, 0.05489, 1, 0.04384, 0.95750, -0.24598, 0.84371, -0.08668, 1, 0.04150, 0.99933, 0.27376, 1, -0.39056, 0.96414, -0.02174, 0.86747, 0.23360, 0.94578, -0.22021, 0.80355, -0.07329, 1, 0 };
            //testData[21] = new double[] { 0, 0, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, -1, 1, 0.65625, 0, 0, 1, -1, 0, 1 };
            //testData[22] = new double[] { 1, 0, 1, 0.67784, 0.81309, 0.82021, 0.43019, 1, 0.20619, 0.80541, -0.43872, 1, -0.79135, 0.77092, -1, 0.40268, -0.39046, -0.58634, -0.97907, -0.42822, -0.73083, -0.76339, -0.37671, -0.97491, 0.41366, -1, 0.41778, -0.93296, 0.25773, -1, 0.93570, -0.35222, 0.98816, 0.03446, 1, 0 };
            //testData[23] = new double[] { 1, 0, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0, 0, 1, -1, 1, -1, 0, 1 };
            //testData[24] = new double[] { 1, 0, 1, 0.03529, 1, 0.18281, 1, 0.26968, 1, 0.25068, 1, 0.28778, 1, 0.38643, 1, 0.31674, 1, 0.65701, 1, 0.53846, 1, 0.61267, 1, 0.59457, 0.89593, 0.68326, 0.89502, 0.71374, 0.85611, 0.67149, 0.74389, 0.85611, 0.71493, 0.75837, 1, 0 };
            //testData[25] = new double[] { 0, 0, 1, -1, 1, 1, -1, -1, 1, -1, 0, 0, 0, 0, -1, 1, 1, -1, 1, -1, -0.75000, 1, 1, -1, 1, -1, 1, -1, -1, -1, 0, 0, 1, -1, 0, 1 };
            //testData[26] = new double[] { 1, 0, 0.96087, 0.08620, 0.96760, 0.19279, 0.96026, 0.27451, 0.98044, 0.35052, 0.92867, 0.46281, 0.86265, 0.52517, 0.82820, 0.58794, 0.73242, 0.69065, 0.69003, 0.73140, 0.54473, 0.68820, 0.48339, 0.76197, 0.40615, 0.74689, 0.33401, 0.83796, 0.24944, 0.86061, 0.13756, 0.86835, 0.09048, 0.86285, 1, 0 };
            //testData[27] = new double[] { 1, 0, 0.69444, 0.38889, 0, 0, -0.32937, 0.69841, 0, 0, 0, 0, 0, 0, 0.20635, -0.24206, 0.21032, 0.19444, 0.46429, 0.78175, 0, 0, 0, 0, 0.73413, 0.27381, 0.76190, 0.63492, 0, 0, 0, 0, 0, 0, 0, 1 };
            //testData[28] = new double[] { 1, 0, 1, 0.05070, 1, 0.10827, 1, 0.19498, 1, 0.28453, 1, 0.34826, 1, 0.38261, 0.94575, 0.42881, 0.89126, 0.50391, 0.75906, 0.58801, 0.80644, 0.59962, 0.79578, 0.62758, 0.66643, 0.63942, 0.59417, 0.69435, 0.49538, 0.72684, 0.47027, 0.71689, 0.33381, 0.75243, 1, 0 };
            //testData[29] = new double[] { 0, 0, 1, 1, 0, 0, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, -1, 1, -1, 1, -1, 1, 1, 0, 0, 1, -1, 0, 1 };
            //testData[30] = new double[] { 1, 0, 1, 0.04078, 1, 0.11982, 1, 0.16159, 1, 0.27921, 0.98703, 0.30889, 0.92745, 0.37639, 0.91118, 0.39749, 0.81939, 0.46059, 0.78619, 0.46994, 0.79400, 0.56282, 0.70331, 0.58129, 0.67077, 0.59723, 0.58903, 0.60990, 0.53952, 0.60932, 0.45312, 0.63636, 0.40442, 0.62658, 1, 0 };
            //testData[31] = new double[] { 0, 0, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, 0, 1 };
            //testData[32] = new double[] { 1, 0, 1, 0.24168, 1, 0.48590, 1, 0.72973, 1, 1, 1, 1, 1, 1, 1, 0.77128, 1, 1, 1, 1, 0.74468, 1, 0.89647, 1, 0.64628, 1, 0.38255, 1, 0.10819, 1, -0.17370, 1, -0.81383, 1, 1, 0 };
            //testData[33] = new double[] { 0, 0, 1, 1, 1, -1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 0, 1 };
            //testData[34] = new double[] { 1, 0, 1, -0.06604, 1, 0.62937, 1, 0.09557, 1, 0.20280, 1, -1, 1, -0.40559, 1, -0.15851, 1, 0.04895, 1, -0.61538, 1, -0.26573, 1, -1, 1, -0.58042, 1, -0.81372, 1, -1, 1, -0.78555, 1, -0.48252, 1, 0 };
            //testData[35] = new double[] { 0, 0, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 0, 1 };
            //testData[36] = new double[] { 1, 0, 0.92277, 0.07804, 0.92679, 0.16251, 0.89702, 0.24618, 0.84111, 0.35197, 0.78801, 0.42196, 0.70716, 0.46983, 0.70796, 0.56476, 0.60459, 0.64200, 0.51247, 0.64924, 0.39903, 0.66975, 0.34232, 0.68343, 0.23693, 0.76146, 0.18765, 0.73885, 0.09694, 0.71038, 0.02735, 0.77072, -0.04023, 0.69509, 1, 0 };
            //testData[37] = new double[] { 1, 0, 0.68198, -0.17314, 0.82332, 0.21908, 0.46643, 0.32862, 0.25795, 0.58304, 1, -0.15194, 0.01060, 0.44523, 0.01060, 0.38869, 0.18681, 0.41168, 0.10567, 0.36353, 0.04325, 0.30745, -0.00083, 0.24936, -0.02862, 0.19405, -0.04314, 0.14481, -0.04779, 0.10349, -0.04585, 0.07064, -0.04013, 0.04586, 0, 1 };
            //testData[38] = new double[] { 1, 0, 0.74852, -0.02811, 0.65680, -0.05178, 0.80621, 0.02811, 0.85947, 0.02515, 0.63462, 0.08728, 0.71598, 0.07840, 0.73077, 0.05178, 0.78550, -0.27811, 0.65976, -0.01479, 0.78698, 0.06953, 0.34615, -0.18639, 0.65385, 0.02811, 0.61009, -0.06637, 0.53550, -0.21154, 0.59024, -0.14053, 0.56361, 0.02959, 1, 0 };





            //testData[0] = new double[] {1.51761,12.81,3.54,1.23,73.24,0.58,8.39,0.00,0.00,0,0,0,0,0,1};
            //testData[1] = new double[] {1.51784,12.68,3.67,1.16,73.11,0.61,8.70,0.00,0.00,0,0,0,0,0,1};
            //testData[2] = new double[] {1.52196,14.36,3.85,0.89,71.36,0.15,9.15,0.00,0.00,0,0,0,0,0,1};
            //testData[3] = new double[] {1.51911,13.90,3.73,1.18,72.12,0.06,8.89,0.00,0.00,0,0,0,0,0,1};
            //testData[4] = new double[] {1.51735,13.02,3.54,1.69,72.73,0.54,8.44,0.00,0.07,0,0,0,0,0,1};
            //testData[5] = new double[] {1.51750,12.82,3.55,1.49,72.75,0.54,8.52,0.00,0.19,0,0,0,0,0,1};
            //testData[6] = new double[] {1.51966,14.77,3.75,0.29,72.02,0.03,9.00,0.00,0.00,0,0,0,0,0,1};
            //testData[7] = new double[] {1.51736,12.78,3.62,1.29,72.79,0.59,8.70,0.00,0.00,0,0,0,0,0,1};
            //testData[8] = new double[] {1.51751,12.81,3.57,1.35,73.02,0.62,8.59,0.00,0.00,0,0,0,0,0,1};
            //testData[9] = new double[] {1.51720,13.38,3.50,1.15,72.85,0.50,8.43,0.00,0.00,0,0,0,0,0,1};
            //testData[10] = new double[] {1.51764,12.98,3.54,1.21,73.00,0.65,8.53,0.00,0.00,0,0,0,0,0,1};
            //testData[11] = new double[] {1.51793,13.21,3.48,1.41,72.64,0.59,8.43,0.00,0.00,0,0,0,0,0,1};
            //testData[12] = new double[] {1.51721,12.87,3.48,1.33,73.04,0.56,8.43,0.00,0.00,0,0,0,0,0,1};
            //testData[13] = new double[] {1.51605,12.90,3.44,1.45,73.06,0.44,8.27,0.00,0.00,0,0,0,0,1,0};
            //testData[14] = new double[] {1.51588,13.12,3.41,1.58,73.26,0.07,8.39,0.00,0.19,0,0,0,0,1,0};
            //testData[15] = new double[] {1.51590,13.24,3.34,1.47,73.10,0.39,8.22,0.00,0.00,0,0,0,0,1,0};
            //testData[16] = new double[] {1.51629,12.71,3.33,1.49,73.28,0.67,8.24,0.00,0.00,0,0,0,0,1,0};
            //testData[17] = new double[] {1.51860,13.36,3.43,1.43,72.26,0.51,8.60,0.00,0.00,0,0,0,0,1,0};
            //testData[18] = new double[] {1.51841,13.02,3.62,1.06,72.34,0.64,9.13,0.00,0.15,0,0,0,0,1,0};
            //testData[19] = new double[] {1.51743,12.20,3.25,1.16,73.55,0.62,8.90,0.00,0.24,0,0,0,0,1,0};
            //testData[20] = new double[] {1.51689,12.67,2.88,1.71,73.21,0.73,8.54,0.00,0.00,0,0,0,0,1,0};
            //testData[21] = new double[] {1.51811,12.96,2.96,1.43,72.92,0.60,8.79,0.14,0.00,0,0,0,0,1,0};
            //testData[22] = new double[] {1.51655,12.75,2.85,1.44,73.27,0.57,8.79,0.11,0.22,0,0,0,0,1,0};
            //testData[23] = new double[] {1.51655,13.41,3.39,1.28,72.64,0.52,8.65,0.00,0.00,0,0,0,1,0,0};
            //testData[24] = new double[] {1.52121,14.03,3.76,0.58,71.79,0.11,9.65,0.00,0.00,0,0,0,1,0,0};
            //testData[25] = new double[] {1.51776,13.53,3.41,1.52,72.04,0.58,8.79,0.00,0.00,0,0,0,1,0,0};
            //testData[26] = new double[] {1.51796,13.50,3.36,1.63,71.94,0.57,8.81,0.00,0.09,0,0,0,1,0,0};
            //testData[27] = new double[] {1.51832,13.33,3.34,1.54,72.14,0.56,8.99,0.00,0.00,0,0,0,1,0,0};
            //testData[28] = new double[] {1.51934,13.64,3.54,0.75,72.65,0.16,8.89,0.15,0.24,0,0,0,1,0,0};
            //testData[29] = new double[] {1.52211,14.19,3.78,0.91,71.36,0.23,9.14,0.00,0.37,0,0,0,1,0,0};
            //testData[30] = new double[] {1.51316,13.02,0.00,3.04,70.48,6.21,6.96,0.00,0.00,0,0,1,0,0,0};
            //testData[31] = new double[] {1.51321,13.00,0.00,3.02,70.70,6.21,6.93,0.00,0.00,0,0,1,0,0,0};
            //testData[32] = new double[] {1.52043,13.38,0.00,1.40,72.25,0.33,12.50,0.00,0.00,0,0,1,0,0,0};
            //testData[33] = new double[] {1.52058,12.85,1.61,2.17,72.18,0.76,9.70,0.24,0.51,0,0,1,0,0,0};
            //testData[34] = new double[] {1.52119,12.97,0.33,1.51,73.39,0.13,11.27,0.00,0.28,0,0,1,0,0,0};
            //testData[35] = new double[] {1.51916,14.15,0.00,2.09,72.74,0.00,10.88,0.00,0.00,0,1,0,0,0,0};
            //testData[36] = new double[] {1.51969,14.56,0.00,0.56,73.48,0.00,11.22,0.00,0.00,0,1,0,0,0,0};
            //testData[37] = new double[] {1.51115,17.38,0.00,0.34,75.41,0.00,6.65,0.00,0.00,0,1,0,0,0,0};
            //testData[38] = new double[] {1.51658,14.80,0.00,1.99,73.11,0.00,8.28,1.71,0.00,1,0,0,0,0,0};
            //testData[39] = new double[] {1.51617,14.95,0.00,2.27,73.30,0.00,8.71,0.67,0.00,1,0,0,0,0,0};
            //testData[40] = new double[] {1.51732,14.95,0.00,1.80,72.99,0.00,8.61,1.55,0.00,1,0,0,0,0,0};
            //testData[41] = new double[] {1.51645,14.94,0.00,1.87,73.11,0.00,8.67,1.38,0.00,1,0,0,0,0,0};
            //testData[42] = new double[] {1.51831,14.39,0.00,1.82,72.86,1.41,6.47,2.88,0.00,1,0,0,0,0,0};


           double[][] trainData = new double[68][];


           trainData[0] = new Double[] { 1183983, 9, 5, 5, 4, 4, 5, 4, 3, 3, 1, 0 };
           trainData[1] = new Double[] { 1184184, 1, 1, 1, 1, 2, 5, 1, 1, 1, 0, 1 };
           trainData[2] = new Double[] { 1184241, 2, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[3] = new Double[] { 1213383, 5, 1, 1, 4, 2, 1, 3, 1, 1, 0, 1 };
           trainData[4] = new Double[] { 1185609, 3, 4, 5, 2, 6, 8, 4, 1, 1, 1, 0 };
           trainData[5] = new Double[] { 1185610, 1, 1, 1, 1, 3, 2, 2, 1, 1, 0, 1 };
           trainData[6] = new Double[] { 1187457, 3, 1, 1, 3, 8, 1, 5, 8, 1, 0, 1 };
           trainData[7] = new Double[] { 1187805, 8, 8, 7, 4, 10, 10, 7, 8, 7, 1, 0 };


           trainData[8] = new Double[] { 1188472, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           trainData[9] = new Double[] { 1189266, 7, 2, 4, 1, 6, 10, 5, 4, 3, 1, 0 };
           trainData[10] = new Double[] { 1189286, 10, 10, 8, 6, 4, 5, 8, 10, 1, 1, 0 };
           trainData[11] = new Double[] { 1190394, 4, 1, 1, 1, 2, 3, 1, 1, 1, 0, 1 };
           trainData[12] = new Double[] { 1190485, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[13] = new Double[] { 1192325, 5, 5, 5, 6, 3, 10, 3, 1, 1, 1, 0 };
           trainData[14] = new Double[] { 1193091, 1, 2, 2, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[15] = new Double[] { 1193210, 2, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[16] = new Double[] { 1196295, 9, 9, 10, 3, 6, 10, 7, 10, 6, 1, 0 };
           trainData[17] = new Double[] { 1196915, 10, 7, 7, 4, 5, 10, 5, 7, 2, 1, 0 };
           trainData[18] = new Double[] { 1197080, 4, 1, 1, 1, 2, 1, 3, 2, 1, 0, 1 };
           trainData[19] = new Double[] { 1197270, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };



           trainData[20] = new Double[] { 1197440, 1, 1, 1, 2, 1, 3, 1, 1, 7, 0, 1 };
           trainData[21] = new Double[] { 1214556, 3, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[22] = new Double[] { 1197979, 4, 1, 1, 1, 2, 2, 3, 2, 1, 0, 1 };
           trainData[23] = new Double[] { 1197993, 5, 6, 7, 8, 8, 10, 3, 10, 3, 1, 0 };
           trainData[24] = new Double[] { 1198128, 10, 8, 10, 10, 6, 1, 3, 1, 10, 1, 0 };
           trainData[25] = new Double[] { 1198641, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[26] = new Double[] { 1199219, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1 };
           trainData[27] = new Double[] { 1199731, 3, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[28] = new Double[] { 1199983, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[29] = new Double[] { 1200772, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };

           trainData[30] = new Double[] { 1204242, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[31] = new Double[] { 1204898, 6, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[32] = new Double[] { 1205138, 5, 8, 8, 8, 5, 10, 7, 8, 1, 1, 0 };
           trainData[33] = new Double[] { 1205579, 8, 7, 6, 4, 4, 10, 5, 1, 1, 1, 0 };
           trainData[34] = new Double[] { 1206089, 2, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           trainData[35] = new Double[] { 1206695, 1, 5, 8, 6, 5, 8, 7, 10, 1, 1, 0 };
           trainData[36] = new Double[] { 1206841, 10, 5, 6, 10, 6, 10, 7, 7, 10, 1, 0 };
           trainData[37] = new Double[] { 1207986, 5, 8, 4, 10, 5, 8, 9, 10, 1, 1, 0 };
           trainData[38] = new Double[] { 1208301, 1, 2, 3, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[39] = new Double[] { 1210963, 10, 10, 10, 8, 6, 8, 7, 10, 1, 1, 0 };
           trainData[40] = new Double[] { 1211202, 7, 5, 10, 10, 10, 10, 4, 10, 3, 1, 0 };
           trainData[41] = new Double[] { 1212232, 5, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };


           trainData[42] = new Double[] { 1116116, 9, 10, 10, 1, 10, 8, 3, 3, 1, 1, 0 };
           trainData[43] = new Double[] { 1116132, 6, 3, 4, 1, 5, 2, 3, 9, 1, 1, 0 };

           trainData[44] = new Double[] { 1116998, 10, 4, 2, 1, 3, 2, 4, 3, 10, 1, 0 };

           trainData[45] = new Double[] { 1118039, 5, 3, 4, 1, 8, 10, 4, 9, 1, 1, 0 };
           trainData[46] = new Double[] { 1120559, 8, 3, 8, 3, 4, 9, 8, 9, 8, 1, 0 };


           trainData[47] = new Double[] { 1123061, 6, 10, 2, 8, 10, 2, 7, 8, 10, 1, 0 };

           trainData[48] = new Double[] { 1125035, 9, 4, 5, 10, 6, 10, 4, 8, 1, 1, 0 };
           trainData[49] = new Double[] { 1126417, 10, 6, 4, 1, 3, 4, 3, 2, 3, 1, 0 };

           trainData[50] = new Double[] { 1175937, 5, 4, 6, 7, 9, 7, 8, 10, 1, 1, 0 };
           trainData[51] = new Double[] { 1176406, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[52] = new Double[] { 1176881, 7, 5, 3, 7, 4, 10, 7, 5, 5, 1, 0 };
           trainData[53] = new Double[] { 1177027, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[54] = new Double[] { 1177399, 8, 3, 5, 4, 5, 10, 1, 6, 2, 1, 0 };
           trainData[55] = new Double[] { 1177512, 1, 1, 1, 1, 10, 1, 1, 1, 1, 0, 1 };
           trainData[56] = new Double[] { 1178580, 5, 1, 3, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[57] = new Double[] { 1179818, 2, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           trainData[58] = new Double[] { 1180194, 5, 10, 8, 10, 8, 10, 3, 6, 3, 1, 0 };
           trainData[59] = new Double[] { 1180523, 3, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1 };
           trainData[60] = new Double[] { 1180831, 3, 1, 1, 1, 3, 1, 2, 1, 1, 0, 1 };
           trainData[61] = new Double[] { 1181356, 5, 1, 1, 1, 2, 2, 3, 3, 1, 0, 1 };
           trainData[62] = new Double[] { 1182404, 4, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[63] = new Double[] { 1182410, 3, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[64] = new Double[] { 1183240, 4, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1 };
           trainData[65] = new Double[] { 1214092, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[66] = new Double[] { 1183516, 3, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           trainData[67] = new Double[] { 1183911, 2, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };



           double[][] testData = new double[69][];



           testData[0] = new Double[] { 1214966, 9, 7, 7, 5, 5, 10, 7, 8, 3, 1, 0 };
           testData[1] = new Double[] { 1216694, 10, 8, 8, 4, 10, 10, 8, 1, 1, 1, 0 };
           testData[2] = new Double[] { 1216947, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[3] = new Double[] { 1217051, 5, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[4] = new Double[] { 1217264, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[5] = new Double[] { 1218105, 5, 10, 10, 9, 6, 10, 7, 10, 5, 1, 0 };
           testData[6] = new Double[] { 1218741, 10, 10, 9, 3, 7, 5, 3, 5, 1, 1, 0 };
           testData[7] = new Double[] { 1218860, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           testData[8] = new Double[] { 1218860, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           testData[9] = new Double[] { 1219406, 5, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           testData[10] = new Double[] { 1219525, 8, 10, 10, 10, 5, 10, 8, 10, 6, 1, 0 };
           testData[11] = new Double[] { 1219859, 8, 10, 8, 8, 4, 8, 7, 7, 1, 1, 0 };
           testData[12] = new Double[] { 1220330, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[13] = new Double[] { 1221863, 10, 10, 10, 10, 7, 10, 7, 10, 4, 1, 0 };
           testData[14] = new Double[] { 1222047, 10, 10, 10, 10, 3, 10, 10, 6, 1, 1, 0 };
           testData[15] = new Double[] { 1222936, 8, 7, 8, 7, 5, 5, 5, 10, 2, 1, 0 };
           testData[16] = new Double[] { 1223282, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           testData[17] = new Double[] { 1223426, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[18] = new Double[] { 1223793, 6, 10, 7, 7, 6, 4, 8, 10, 2, 1, 0 };
           testData[19] = new Double[] { 1223967, 6, 1, 3, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[20] = new Double[] { 1224329, 1, 1, 1, 2, 2, 1, 3, 1, 1, 0, 1 };
           testData[21] = new Double[] { 1225799, 10, 6, 4, 3, 10, 10, 9, 10, 1, 1, 0 };
           testData[22] = new Double[] { 1226012, 4, 1, 1, 3, 1, 5, 2, 1, 1, 1, 0 };
           testData[23] = new Double[] { 1226612, 7, 5, 6, 3, 3, 8, 7, 4, 1, 1, 0 };
           testData[24] = new Double[] { 1227210, 10, 5, 5, 6, 3, 10, 7, 9, 2, 1, 0 };
           testData[25] = new Double[] { 1227244, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           testData[26] = new Double[] { 1227481, 10, 5, 7, 4, 4, 10, 8, 9, 1, 1, 0 };
           testData[27] = new Double[] { 1228152, 8, 9, 9, 5, 3, 5, 7, 7, 1, 1, 0 };
           testData[28] = new Double[] { 1228311, 1, 1, 1, 1, 1, 1, 3, 1, 1, 0, 1 };
           testData[29] = new Double[] { 1230175, 10, 10, 10, 3, 10, 10, 9, 10, 1, 1, 0 };
           testData[30] = new Double[] { 1230688, 7, 4, 7, 4, 3, 7, 7, 6, 1, 1, 0 };
           testData[31] = new Double[] { 1231387, 6, 8, 7, 5, 6, 8, 8, 9, 2, 1, 0 };
           testData[32] = new Double[] { 1231706, 8, 4, 6, 3, 3, 1, 4, 3, 1, 0, 1 };
           testData[33] = new Double[] { 1232225, 10, 4, 5, 5, 5, 10, 4, 1, 1, 1, 0 };
           testData[34] = new Double[] { 1236043, 3, 3, 2, 1, 3, 1, 3, 6, 1, 0, 1 };

           testData[35] = new Double[] { 1241559, 10, 8, 8, 2, 8, 10, 4, 8, 10, 1, 0 };
           testData[36] = new Double[] { 1241679, 9, 8, 8, 5, 6, 2, 4, 10, 4, 1, 0 };
           testData[37] = new Double[] { 1242364, 8, 10, 10, 8, 6, 9, 3, 10, 10, 1, 0 };
           testData[38] = new Double[] { 1243256, 10, 4, 3, 2, 3, 10, 5, 3, 2, 1, 0 };
           testData[39] = new Double[] { 1270479, 5, 1, 3, 3, 2, 2, 2, 3, 1, 0, 1 };
           testData[40] = new Double[] { 1276091, 3, 1, 1, 3, 1, 1, 3, 1, 1, 0, 1 };
           testData[41] = new Double[] { 1277018, 2, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[42] = new Double[] { 128059, 1, 1, 1, 1, 2, 5, 5, 1, 1, 0, 1 };
           testData[43] = new Double[] { 1285531, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[44] = new Double[] { 1287775, 5, 1, 1, 2, 2, 2, 3, 1, 1, 0, 1 };
           testData[45] = new Double[] { 144888, 8, 10, 10, 8, 5, 10, 7, 8, 1, 1, 0 };
           testData[46] = new Double[] { 145447, 8, 4, 4, 1, 2, 9, 3, 3, 1, 1, 0 };
           testData[47] = new Double[] { 167528, 4, 1, 1, 1, 2, 1, 3, 6, 1, 0, 1 };

           testData[48] = new Double[] { 183913, 1, 2, 2, 1, 2, 1, 1, 1, 1, 0, 1 };
           testData[49] = new Double[] { 191250, 10, 4, 4, 10, 2, 10, 5, 3, 3, 1, 0 };
           testData[50] = new Double[] { 1017023, 6, 3, 3, 5, 3, 10, 3, 5, 3, 0, 1 };
           testData[51] = new Double[] { 1100524, 6, 10, 10, 2, 8, 10, 7, 3, 3, 1, 0 };

           testData[52] = new Double[] { 1182404, 3, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1 };
           testData[53] = new Double[] { 1182404, 3, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           testData[54] = new Double[] { 1198641, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[55] = new Double[] { 242970, 5, 7, 7, 1, 5, 8, 3, 4, 1, 0, 1 };

           testData[56] = new Double[] { 1182404, 5, 1, 4, 1, 2, 1, 3, 2, 1, 0, 1 };

           testData[57] = new Double[] { 385103, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[58] = new Double[] { 411453, 5, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };

           testData[59] = new Double[] { 431495, 3, 1, 1, 1, 2, 1, 3, 2, 1, 0, 1 };
           testData[60] = new Double[] { 434518, 3, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           testData[61] = new Double[] { 452264, 1, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1 };
           testData[62] = new Double[] { 456282, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };

           testData[63] = new Double[] { 486283, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[64] = new Double[] { 486662, 2, 1, 1, 2, 2, 1, 3, 1, 1, 0, 1 };

           testData[65] = new Double[] { 836433, 5, 1, 1, 3, 2, 1, 1, 1, 1, 0, 1 };
           testData[66] = new Double[] { 733639, 3, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };

           testData[67] = new Double[] { 740492, 1, 1, 1, 1, 2, 1, 3, 1, 1, 0, 1 };
           testData[68] = new Double[] { 743348, 3, 2, 2, 1, 2, 1, 2, 3, 1, 0, 1 };






            //testData[0] = new double[] { 4.6, 3.1, 1.5, 0.2, 0, 0, 1 };
            //testData[1] = new double[] { 7.1, 3, 5.9, 2.1, 1, 0, 0 };
            //testData[2] = new double[] { 5.1, 3.5, 1.4, 0.2, 0, 0, 1 };
            //testData[3] = new double[] { 6.3, 3.3, 4.7, 1.6, 0, 1, 0 };
            //testData[4] = new double[] { 6.6, 2.9, 4.6, 1.3, 0, 1, 0 };
            //testData[5] = new double[] { 7.3, 2.9, 6.3, 1.8, 1, 0, 0 };

            Console.WriteLine("The training data is:");
            ShowMatrix(trainData, trainData.Length, 1, true);

            Console.WriteLine("The test data is:");
            ShowMatrix(testData, testData.Length, 1, true);

            Console.WriteLine("\nCreating a 4-input, 6-hidden, 3-output neural network");
            Console.WriteLine("Using tanh and softmax activations");
            const int numInput = 10;
            const int numHidden =27;
            const int numOutput =2;
            NeuralNetwork nn = new NeuralNetwork(numInput, numHidden, numOutput);

            int numParticles = 27;
            int maxEpochs = 10000;
            double exitError = 0.04;
            double probDeath = 0.005;

            Console.WriteLine("Setting numParticles = " + numParticles);
            Console.WriteLine("Setting maxEpochs = " + maxEpochs);
            Console.WriteLine("Setting early exit MSE error = " + exitError.ToString("F3"));
            Console.WriteLine("Setting probDeath = " + probDeath.ToString("F3"));
            // other optional PSO parameters (weight decay, death, etc) here

            Console.WriteLine("\nBeginning training using a particle swarm\n");
            double[] bestWeights = nn.Train(trainData, numParticles, maxEpochs, exitError, probDeath);
            Console.WriteLine("Training complete");
            Console.WriteLine("Final neural network weights and bias values:");
            ShowVector(bestWeights, 10, 3, true);

            nn.SetWeights(bestWeights);
            double trainAcc = nn.Accuracy(trainData);
            Console.WriteLine("\nAccuracy on training data = " + trainAcc.ToString("F4"));

            double testAcc = nn.Accuracy(testData);
            Console.WriteLine("\nAccuracy on test data = " + testAcc.ToString("F4"));

            Console.WriteLine("\nEnd neural network training with particle swarm optimization demo\n");          
            Console.ReadLine();

        } // Main

        static void ShowVector(double[] vector, int valsPerRow, int decimals, bool newLine)
        {
            for (int i = 0; i < vector.Length; ++i)
            {
                if (i % valsPerRow == 0) Console.WriteLine("");
                Console.Write(vector[i].ToString("F" + decimals).PadLeft(decimals + 4) + " ");
            }
            if (newLine == true) Console.WriteLine("");
        }

        static void ShowMatrix(double[][] matrix, int numRows, int decimals, bool newLine)
        {
            for (int i = 0; i < numRows; ++i)
            {
                Console.Write(i.ToString().PadLeft(3) + ": ");
                for (int j = 0; j < matrix[i].Length; ++j)
                {
                    if (matrix[i][j] >= 0.0) Console.Write(" "); else Console.Write("-"); ;
                    Console.Write(Math.Abs(matrix[i][j]).ToString("F" + decimals) + " ");
                }
                Console.WriteLine("");
            }
            if (newLine == true) Console.WriteLine("");
        }

    } // class Program

    public class NeuralNetwork
    {
        //private static Random rnd; // for BP to initialize wts, in PSO 
        private int numInput;
        private int numHidden;
        private int numOutput;
        private double[] inputs;
        private double[][] ihWeights; // input-hidden
        private double[] hBiases;
        private double[] hOutputs;
        private double[][] hoWeights; // hidden-output
        private double[] oBiases;
        private double[] outputs;

        public NeuralNetwork(int numInput, int numHidden, int numOutput)
        {
            //rnd = new Random(16); // for particle initialization. 16 just gives nice demo
            this.numInput = numInput;
            this.numHidden = numHidden;
            this.numOutput = numOutput;
            this.inputs = new double[numInput];
            this.ihWeights = MakeMatrix(numInput, numHidden);
            this.hBiases = new double[numHidden];
            this.hOutputs = new double[numHidden];
            this.hoWeights = MakeMatrix(numHidden, numOutput);
            this.oBiases = new double[numOutput];
            this.outputs = new double[numOutput];
        } // ctor

        private static double[][] MakeMatrix(int rows, int cols) // helper for ctor
        {
            double[][] result = new double[rows][];
            for (int r = 0; r < result.Length; ++r)
                result[r] = new double[cols];
            return result;
        }

        //public override string ToString() // yikes
        //{
        //  string s = "";
        //  s += "===============================\n";
        //  s += "numInput = " + numInput + " numHidden = " + numHidden + " numOutput = " + numOutput + "\n\n";

        //  s += "inputs: \n";
        //  for (int i = 0; i < inputs.Length; ++i)
        //    s += inputs[i].ToString("F2") + " ";
        //  s += "\n\n";

        //  s += "ihWeights: \n";
        //  for (int i = 0; i < ihWeights.Length; ++i)
        //  {
        //    for (int j = 0; j < ihWeights[i].Length; ++j)
        //    {
        //      s += ihWeights[i][j].ToString("F4") + " ";
        //    }
        //    s += "\n";
        //  }
        //  s += "\n";

        //  s += "hBiases: \n";
        //  for (int i = 0; i < hBiases.Length; ++i)
        //    s += hBiases[i].ToString("F4") + " ";
        //  s += "\n\n";

        //  s += "hOutputs: \n";
        //  for (int i = 0; i < hOutputs.Length; ++i)
        //    s += hOutputs[i].ToString("F4") + " ";
        //  s += "\n\n";

        //  s += "hoWeights: \n";
        //  for (int i = 0; i < hoWeights.Length; ++i)
        //  {
        //    for (int j = 0; j < hoWeights[i].Length; ++j)
        //    {
        //      s += hoWeights[i][j].ToString("F4") + " ";
        //    }
        //    s += "\n";
        //  }
        //  s += "\n";

        //  s += "oBiases: \n";
        //  for (int i = 0; i < oBiases.Length; ++i)
        //    s += oBiases[i].ToString("F4") + " ";
        //  s += "\n\n";

        //  s += "outputs: \n";
        //  for (int i = 0; i < outputs.Length; ++i)
        //    s += outputs[i].ToString("F2") + " ";
        //  s += "\n\n";

        //  s += "===============================\n";
        //  return s;
        //}

        // ----------------------------------------------------------------------------------------

        public void SetWeights(double[] weights)
        {
            // copy weights and biases in weights[] array to i-h weights, i-h biases, h-o weights, h-o biases
            int numWeights = (numInput * numHidden) + (numHidden * numOutput) + numHidden + numOutput;
            if (weights.Length != numWeights)
                throw new Exception("Bad weights array length: ");

            int k = 0; // points into weights param

            for (int i = 0; i < numInput; ++i)
                for (int j = 0; j < numHidden; ++j)
                    ihWeights[i][j] = weights[k++];
            for (int i = 0; i < numHidden; ++i)
                hBiases[i] = weights[k++];
            for (int i = 0; i < numHidden; ++i)
                for (int j = 0; j < numOutput; ++j)
                    hoWeights[i][j] = weights[k++];
            for (int i = 0; i < numOutput; ++i)
                oBiases[i] = weights[k++];
        }

        public double[] GetWeights()
        {
            // returns the current set of wweights, presumably after training
            int numWeights = (numInput * numHidden) + (numHidden * numOutput) + numHidden + numOutput;
            double[] result = new double[numWeights];
            int k = 0;
            for (int i = 0; i < ihWeights.Length; ++i)
                for (int j = 0; j < ihWeights[0].Length; ++j)
                    result[k++] = ihWeights[i][j];
            for (int i = 0; i < hBiases.Length; ++i)
                result[k++] = hBiases[i];
            for (int i = 0; i < hoWeights.Length; ++i)
                for (int j = 0; j < hoWeights[0].Length; ++j)
                    result[k++] = hoWeights[i][j];
            for (int i = 0; i < oBiases.Length; ++i)
                result[k++] = oBiases[i];
            return result;
        }

        // ----------------------------------------------------------------------------------------

        public double[] ComputeOutputs(double[] xValues)
        {
            if (xValues.Length != numInput)
                throw new Exception("Bad xValues array length");

            double[] hSums = new double[numHidden]; // hidden nodes sums scratch array
            double[] oSums = new double[numOutput]; // output nodes sums

            for (int i = 0; i < xValues.Length; ++i) // copy x-values to inputs
                this.inputs[i] = xValues[i];

            for (int j = 0; j < numHidden; ++j)  // compute i-h sum of weights * inputs
                for (int i = 0; i < numInput; ++i)
                    hSums[j] += this.inputs[i] * this.ihWeights[i][j]; // note +=

            for (int i = 0; i < numHidden; ++i)  // add biases to input-to-hidden sums
                hSums[i] += this.hBiases[i];

            for (int i = 0; i < numHidden; ++i)   // apply activation
                this.hOutputs[i] = HyperTanFunction(hSums[i]); // hard-coded

            for (int j = 0; j < numOutput; ++j)   // compute h-o sum of weights * hOutputs
                for (int i = 0; i < numHidden; ++i)
                    oSums[j] += hOutputs[i] * this.hoWeights[i][j];

            for (int i = 0; i < numOutput; ++i)  // add biases to input-to-hidden sums
                oSums[i] += oBiases[i];

            double[] softOut = Softmax(oSums); // softmax activation does all outputs at once for efficiency
            Array.Copy(softOut, outputs, softOut.Length);

            double[] retResult = new double[numOutput]; // could define a GetOutputs method instead
            Array.Copy(this.outputs, retResult, retResult.Length);
            return retResult;
        } // ComputeOutputs

        private static double HyperTanFunction(double x)
        {
            if (x < -20.0) return -1.0; // approximation is correct to 30 decimals
            else if (x > 20.0) return 1.0;
            else return Math.Tanh(x);
        }

        private static double[] Softmax(double[] oSums)
        {
            // does all output nodes at once so scale doesn't have to be re-computed each time
            // determine max output sum
            double max = oSums[0];
            for (int i = 0; i < oSums.Length; ++i)
                if (oSums[i] > max) max = oSums[i];

            // determine scaling factor -- sum of exp(each val - max)
            double scale = 0.0;
            for (int i = 0; i < oSums.Length; ++i)
                scale += Math.Exp(oSums[i] - max);

            double[] result = new double[oSums.Length];
            for (int i = 0; i < oSums.Length; ++i)
                result[i] = Math.Exp(oSums[i] - max) / scale;

            return result; // now scaled so that xi sum to 1.0
        }

        // ----------------------------------------------------------------------------------------

        public double[] Train(double[][] trainData, int numParticles, int maxEpochs, double exitError, double probDeath)
        {
            // PSO version training. best weights stored into NN and returned
            // particle position == NN weights

            Random rnd = new Random(16); // 16 just gives nice demo

            int numWeights = (this.numInput * this.numHidden) + (this.numHidden * this.numOutput) +
              this.numHidden + this.numOutput;

            // use PSO to seek best weights
            int epoch = 0;
            double minX = -15.0;// for each weight. assumes data has been normalized about 0
            double maxX = 15.0;
            double w = 0.729; // inertia weight
            double c1 = 1.49445; // cognitive/local weight
            double c2 = 1.49445; // social/global weight
            double r1, r2; // cognitive and social randomizations
            double newEntropy;
            double minEntropy = Double.MaxValue;
            Particle[] swarm = new Particle[numParticles];
            // best solution found by any particle in the swarm. implicit initialization to all 0.0
            double[] bestGlobalPosition = new double[numWeights];
            double bestGlobalError = double.MaxValue; // smaller values better

            //double minV = -0.01 * maxX;  // velocities
            //double maxV = 0.01 * maxX;

            // swarm initialization
            // initialize each Particle in the swarm with random positions and velocities
            for (int i = 0; i < swarm.Length; ++i)
            {
                double[] randomPosition = new double[numWeights];
                for (int j = 0; j < randomPosition.Length; ++j)
                {
                    //double lo = minX;
                    //double hi = maxX;
                    //randomPosition[j] = (hi - lo) * rnd.NextDouble() + lo;
                    randomPosition[j] = (maxX - minX) * rnd.NextDouble() + minX;
                }

                // randomPosition is a set of weights; sent to NN
               double error = MeanCrossEntropy(trainData, randomPosition);
               //double error = MeanSquaredError(trainData, randomPosition);
                double[] randomVelocity = new double[numWeights];

                for (int j = 0; j < randomVelocity.Length; ++j)
                {
                    //double lo = -1.0 * Math.Abs(maxX - minX);
                    //double hi = Math.Abs(maxX - minX);
                    //randomVelocity[j] = (hi - lo) * rnd.NextDouble() + lo;
                    double lo = 0.1 * minX;
                    double hi = 0.1 * maxX;
                    randomVelocity[j] = (hi - lo) * rnd.NextDouble() + lo;

                }
                swarm[i] = new Particle(randomPosition, error, randomVelocity, randomPosition, error); // last two are best-position and best-error

                // does current Particle have global best position/solution?
                if (swarm[i].error < bestGlobalError)
                {
                    bestGlobalError = swarm[i].error;
                    swarm[i].position.CopyTo(bestGlobalPosition, 0);
                }
            }
            // initialization



            //Console.WriteLine("Entering main PSO weight estimation processing loop");

            // main PSO algorithm

            int[] sequence = new int[numParticles]; // process particles in random order
            for (int i = 0; i < sequence.Length; ++i)
                sequence[i] = i;

            while (epoch < maxEpochs)
            {
                if (bestGlobalError < exitError) break; // early exit (MSE error)

                double[] newVelocity = new double[numWeights]; // step 1
                double[] newPosition = new double[numWeights]; // step 2
                double newError; // step 3
               

                Shuffle(sequence, rnd); // move particles in random sequence

                for (int pi = 0; pi < swarm.Length; ++pi) // each Particle (index)
                {
                    int i = sequence[pi];
                    Particle currP = swarm[i]; // for coding convenience

                    // 1. compute new velocity
                    for (int j = 0; j < currP.velocity.Length; ++j) // each x value of the velocity
                    {
                        r1 = rnd.NextDouble();
                        r2 = rnd.NextDouble();

                        // velocity depends on old velocity, best position of parrticle, and 
                        // best position of any particle
                        newVelocity[j] = (w * currP.velocity[j]) +
                          (c1 * r1 * (currP.bestPosition[j] - currP.position[j])) +
                          (c2 * r2 * (bestGlobalPosition[j] - currP.position[j]));
                    }

                    newVelocity.CopyTo(currP.velocity, 0);

                    // 2. use new velocity to compute new position
                    for (int j = 0; j < currP.position.Length; ++j)
                    {
                        newPosition[j] = currP.position[j] + newVelocity[j];  // compute new position
                        if (newPosition[j] < minX) // keep in range
                            newPosition[j] = minX;
                        else if (newPosition[j] > maxX)
                            newPosition[j] = maxX;
                    }

                    newPosition.CopyTo(currP.position, 0);

                    // 2b. optional: apply weight decay (large weights tend to overfit) 

                    // 3. use new position to compute new error
                    newError = MeanCrossEntropy(trainData, newPosition); // makes next check a bit cleaner
                   // newError = MeanSquaredError(trainData, newPosition);
                    

                    currP.error = newError;

                    if (newError < currP.bestError) // new particle best?
                    {
                        newPosition.CopyTo(currP.bestPosition, 0);
                        currP.bestError = newError;
                    }

                    if (newError < bestGlobalError) // new global best?
                    {
                        newPosition.CopyTo(bestGlobalPosition, 0);
                        bestGlobalError = newError;
                    }

                    // 4. optional: does curr particle die?
                    double die = rnd.NextDouble();
                    if (die < probDeath)
                    {
                        // new position, leave velocity, update error
                        for (int j = 0; j < currP.position.Length; ++j)
                            currP.position[j] = (maxX - minX) * rnd.NextDouble() + minX;
                       // currP.error = MeanSquaredError(trainData, currP.position);
                        currP.error = MeanCrossEntropy(trainData, currP.position);
                        currP.position.CopyTo(currP.bestPosition, 0);
                        currP.bestError = currP.error;

                        if (currP.error < bestGlobalError) // global best by chance?
                        {
                            bestGlobalError = currP.error;
                            currP.position.CopyTo(bestGlobalPosition, 0);
                        }
                    }
                   

                } // each Particle

                newEntropy = Entropy(bestGlobalPosition);
                SetWeights(bestGlobalPosition);
                double trainAcc = Accuracy(trainData);
                Console.WriteLine( newEntropy + " " +bestGlobalError+" "+ epoch + " "+trainAcc+"\n");
                             
                ++epoch;

            } // while
          
            this.SetWeights(bestGlobalPosition);  // best position is a set of weights
            double[] retResult = new double[numWeights];
            Array.Copy(bestGlobalPosition, retResult, retResult.Length);
            return retResult;

        } // Train

        private double Entropy(double[] weights)
        {
            this.SetWeights(weights); // copy the weights to evaluate in
            double[][] ihWeightsn;
            double[][] hoWeightsn;
            double sumih = 0;
            double sumho = 0;
            double min = 0;
            double max = 0;
            double entropy = 0;
            ihWeightsn = MakeMatrix(numInput, numHidden);
            hoWeightsn = MakeMatrix(numHidden, numOutput);
            double[] entropyih = new double[numHidden];
            double[] entropyho = new double[numOutput];

            for (int j = 0; j < numHidden; ++j)
                entropyih[j] = 0;
            for (int j = 0; j < numOutput; ++j)
                entropyho[j] = 0;

            for (int j = 0; j < numHidden; ++j)
            {
                sumih = 0;
                min = Double.MaxValue;
                max = Double.MinValue;
                for (int i = 0; i < numInput; ++i)
                {
                    if (min > ihWeights[i][j])
                        min = ihWeights[i][j];
                    if (max < ihWeights[i][j])
                        max = ihWeights[i][j];
                }
                for (int i = 0; i < numInput; ++i)
                {
                    ihWeightsn[i][j] = (ihWeights[i][j] - min) / (max - min);
                }
                for (int i = 0; i < numInput; ++i)  
                    sumih +=( ihWeightsn[i][j]);
                for (int i = 0; i < numInput; ++i)
                {
                    ihWeightsn[i][j] = ihWeightsn[i][j] / sumih;
                  // Console.WriteLine(min +" "+max);
                }
               // Console.WriteLine("\n");
            }
            for (int j = 0; j < numOutput; ++j)
            {
                min = Double.MaxValue;
                max = Double.MinValue;
                sumho = 0;
                for (int i = 0; i < numHidden; ++i)
                {
                    if (min > hoWeights[i][j])
                        min = hoWeights[i][j];
                    if (max < hoWeights[i][j])
                        max = hoWeights[i][j];
                }
                for (int i = 0; i < numHidden; ++i)
                {
                    hoWeightsn[i][j] = (hoWeights[i][j] - min) / (max - min);
                }

                for (int i = 0; i < numHidden; ++i)
                    sumho += hoWeightsn[i][j];
                for (int i = 0; i < numHidden; ++i)
                {
                    hoWeightsn[i][j] =hoWeightsn[i][j] / sumho;
                   // Console.WriteLine( hoWeightsn[i][j] + " ");
                }
               // Console.WriteLine("\n");
            }
            for (int j = 0; j < numHidden; ++j)
            {
                for (int i = 0; i < numInput; ++i)
                     entropyih[j] += (ihWeightsn[i][j] * Math.Exp(-(ihWeightsn[i][j]*ihWeightsn[i][j])));
                    //if (ihWeightsn[i][j] == 0)
                    //    entropyih[j] += 0;
                    //else
                    //entropyih[j] += -(ihWeightsn[i][j] * Math.Log(ihWeightsn[i][j],2));
            }
            for (int j = 0; j < numOutput; ++j)
            {
                for (int i = 0; i < numHidden; ++i)
                    entropyho[j] += entropyih[i] * hoWeightsn[i][j];
            }
            for (int j = 0; j < numOutput; ++j)
            {
                entropy += entropyho[j];
            }
            return entropy;
        }
        private static void Shuffle(int[] sequence, Random rnd)
        {
            for (int i = 0; i < sequence.Length; ++i)
            {
                int r = rnd.Next(i, sequence.Length);
                int tmp = sequence[r];
                sequence[r] = sequence[i];
                sequence[i] = tmp;
            }
        }

        private double MeanSquaredError(double[][] trainData, double[] weights)
        {
            // assumes that centroids and widths have been set!
            this.SetWeights(weights); // copy the weights to evaluate in
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets
            double sumSquaredError = 0.0;
            for (int i = 0; i < trainData.Length; ++i) // walk through each training data item
            {
                // following assumes data has all x-values first, followed by y-values!
                Array.Copy(trainData[i], xValues, numInput); // extract inputs
                Array.Copy(trainData[i], numInput, tValues, 0, numOutput); // extract targets
                double[] yValues = this.ComputeOutputs(xValues); // compute the outputs using centroids, widths, weights, bias values
                for (int j = 0; j < yValues.Length; ++j)
                    sumSquaredError += ((yValues[j] - tValues[j]) * (yValues[j] - tValues[j]));
            }
            return sumSquaredError / trainData.Length;
        }


        private double MeanCrossEntropy(double[][] trainData, double[] weights)
        {
            // (average) Cross Entropy for a given particle's position/weights
             //how good (cross entropy) are weights? CrossEntropy is error so smaller values are better
            this.SetWeights(weights); // load the weights and biases to examine into the NN

            double sce = 0.0; // sum of cross entropies of all data items
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets

            // walk thru each training case. looks like (6.9 3.2 5.7 2.3) (0 0 1)
            for (int i = 0; i < trainData.Length; ++i)
            {
                Array.Copy(trainData[i], xValues, numInput); // extract inputs
                Array.Copy(trainData[i], numInput, tValues, 0, numOutput); // extract targets

                double[] yValues = this.ComputeOutputs(xValues);
               
                // run the inputs through the neural network
                // assumes outputs are 'softmaxed' -- all between 0 and 1, and sum to 1

                // CE = -Sum( t * log(y) )
                 //see http://dame.dsf.unina.it/documents/softmax_entropy_VONEURAL-SPE-NA-0004-Rel1.0.pdf 
                 //for an explanation of why cross tropy sometimes given as CE = -Sum( t * log(t/y) ), as in 
                 //"On the Pairing of the Softmax Activation and Cross-Entropy Penalty Functions and
                 //the Derivation of the Softmax Activation Function", Dunne & Campbell.
                double currSum = 0.0;
                for (int j = 0; j < yValues.Length; ++j)
                {
                    currSum += tValues[j] * Math.Log(yValues[j]);
                
                   // Console.WriteLine(yValues[j] + "\n");
                    // diff between targets and y
                }
                sce += currSum; // accumulate
            }

            return -sce / trainData.Length;
        } // MeanCrossEntropy



        // ----------------------------------------------------------------------------------------

        public double Accuracy(double[][] testData)
        {
            // percentage correct using winner-takes all
            int numCorrect = 0;
            int numWrong = 0;
            double[] xValues = new double[numInput]; // inputs
            double[] tValues = new double[numOutput]; // targets
            double[] yValues; // computed Y

            for (int i = 0; i < testData.Length; ++i)
            {
                Array.Copy(testData[i], xValues, numInput); // parse test data into x-values and t-values
                Array.Copy(testData[i], numInput, tValues, 0, numOutput);
                yValues = this.ComputeOutputs(xValues);
                int maxIndex = MaxIndex(yValues); // which cell in yValues has largest value?

                if (tValues[maxIndex] == 1.0) // ugly. consider AreEqual(double x, double y)
                    ++numCorrect;
                else
                    ++numWrong;
            }
            
                return (numCorrect * 1.0) / (numCorrect + numWrong); // ugly 2 - check for divide by zero
        }

        private static int MaxIndex(double[] vector) // helper for Accuracy()
        {
            // index of largest value
            int bigIndex = 0;
            double biggestVal = vector[0];
            for (int i = 0; i < vector.Length; ++i)
            {
                if (vector[i] > biggestVal)
                {
                    biggestVal = vector[i]; bigIndex = i;
                }
            }
            return bigIndex;
        }

    } // NeuralNetwork

    // ==============================================================================================

    public class Particle
    {
        public double[] position; // equivalent to NN weights
        public double error; // measure of fitness
        public double[] velocity;

        public double[] bestPosition; // best position found so far by this Particle
        public double bestError;

        //public double age; // optional used to determine death-birth

        public Particle(double[] position, double error, double[] velocity,
          double[] bestPosition, double bestError)
        {
            this.position = new double[position.Length];
            position.CopyTo(this.position, 0);
            this.error = error;
            this.velocity = new double[velocity.Length];
            velocity.CopyTo(this.velocity, 0);
            this.bestPosition = new double[bestPosition.Length];
            bestPosition.CopyTo(this.bestPosition, 0);
            this.bestError = bestError;

            //this.age = 0;
        }

        //public override string ToString()
        //{
        //  string s = "";
        //  s += "==========================\n";
        //  s += "Position: ";
        //  for (int i = 0; i < this.position.Length; ++i)
        //    s += this.position[i].ToString("F2") + " ";
        //  s += "\n";
        //  s += "Error = " + this.error.ToString("F4") + "\n";
        //  s += "Velocity: ";
        //  for (int i = 0; i < this.velocity.Length; ++i)
        //    s += this.velocity[i].ToString("F2") + " ";
        //  s += "\n";
        //  s += "Best Position: ";
        //  for (int i = 0; i < this.bestPosition.Length; ++i)
        //    s += this.bestPosition[i].ToString("F2") + " ";
        //  s += "\n";
        //  s += "Best Error = " + this.bestError.ToString("F4") + "\n";
        //  s += "==========================\n";
        //  return s;
        //}

    } // class Particle

} // ns

//double[][] allData = new double[30][];
//allData[0] = new double[] { 5.1, 3.5, 1.4, 0.2, 0, 0, 1 }; // sepal length, sepal width, petal length, petal width -> 
//allData[1] = new double[] { 4.9, 3.0, 1.4, 0.2, 0, 0, 1 }; // Iris setosa = 0 0 1, Iris versicolor = 0 1 0, Iris virginica = 1 0 0
//allData[2] = new double[] { 4.7, 3.2, 1.3, 0.2, 0, 0, 1 };
//allData[3] = new double[] { 4.6, 3.1, 1.5, 0.2, 0, 0, 1 };
//allData[4] = new double[] { 5.0, 3.6, 1.4, 0.2, 0, 0, 1 };
//allData[5] = new double[] { 5.4, 3.9, 1.7, 0.4, 0, 0, 1 };
//allData[6] = new double[] { 4.6, 3.4, 1.4, 0.3, 0, 0, 1 };
//allData[7] = new double[] { 5.0, 3.4, 1.5, 0.2, 0, 0, 1 };
//allData[8] = new double[] { 4.4, 2.9, 1.4, 0.2, 0, 0, 1 };
//allData[9] = new double[] { 4.9, 3.1, 1.5, 0.1, 0, 0, 1 };

//allData[10] = new double[] { 7.0, 3.2, 4.7, 1.4, 0, 1, 0 };
//allData[11] = new double[] { 6.4, 3.2, 4.5, 1.5, 0, 1, 0 };
//allData[12] = new double[] { 6.9, 3.1, 4.9, 1.5, 0, 1, 0 };
//allData[13] = new double[] { 5.5, 2.3, 4.0, 1.3, 0, 1, 0 };
//allData[14] = new double[] { 6.5, 2.8, 4.6, 1.5, 0, 1, 0 };
//allData[15] = new double[] { 5.7, 2.8, 4.5, 1.3, 0, 1, 0 };
//allData[16] = new double[] { 6.3, 3.3, 4.7, 1.6, 0, 1, 0 };
//allData[17] = new double[] { 4.9, 2.4, 3.3, 1.0, 0, 1, 0 };
//allData[18] = new double[] { 6.6, 2.9, 4.6, 1.3, 0, 1, 0 };
//allData[19] = new double[] { 5.2, 2.7, 3.9, 1.4, 0, 1, 0 };

//allData[20] = new double[] { 6.3, 3.3, 6.0, 2.5, 1, 0, 0 };
//allData[21] = new double[] { 5.8, 2.7, 5.1, 1.9, 1, 0, 0 };
//allData[22] = new double[] { 7.1, 3.0, 5.9, 2.1, 1, 0, 0 };
//allData[23] = new double[] { 6.3, 2.9, 5.6, 1.8, 1, 0, 0 };
//allData[24] = new double[] { 6.5, 3.0, 5.8, 2.2, 1, 0, 0 };
//allData[25] = new double[] { 7.6, 3.0, 6.6, 2.1, 1, 0, 0 };
//allData[26] = new double[] { 4.9, 2.5, 4.5, 1.7, 1, 0, 0 };
//allData[27] = new double[] { 7.3, 2.9, 6.3, 1.8, 1, 0, 0 };
//allData[28] = new double[] { 6.7, 2.5, 5.8, 1.8, 1, 0, 0 };
//allData[29] = new double[] { 7.2, 3.6, 6.1, 2.5, 1, 0, 0 };

//static void MakeTrainTest(double[][] allData, out double[][] trainData, out double[][] testData)
//{
//  // split allData into 80% trainData and 20% testData
//  Random rnd = new Random(2);
//  int totRows = allData.Length;
//  int numCols = allData[0].Length;

//  int trainRows = (int)(totRows * 0.80); // hard-coded 80-20 split
//  int testRows = totRows - trainRows;

//  trainData = new double[trainRows][];
//  testData = new double[testRows][];

//  int[] sequence = new int[totRows]; // create a random sequence of indexes
//  for (int i = 0; i < sequence.Length; ++i)
//    sequence[i] = i;

//  for (int i = 0; i < sequence.Length; ++i)
//  {
//    int r = rnd.Next(i, sequence.Length);
//    int tmp = sequence[r];
//    sequence[r] = sequence[i];
//    sequence[i] = tmp;
//  }

//  int si = 0; // index into sequence[]
//  int j = 0; // index into trainData or testData

//  for (; si < trainRows; ++si) // first rows to train data
//  {
//    trainData[j] = new double[numCols];
//    int idx = sequence[si];
//    Array.Copy(allData[idx], trainData[j], numCols);
//    ++j;
//  }

//  j = 0; // reset to start of test data
//  for (; si < totRows; ++si) // remainder to test data
//  {
//    testData[j] = new double[numCols];
//    int idx = sequence[si];
//    Array.Copy(allData[idx], testData[j], numCols);
//    ++j;
//  }

//  // train data
//  for (int i = 0; i < trainData.Length; ++i)
//  {
//    Console.WriteLine("trainData[" + i + "] = new double[] { " + trainData[i][0] + ", " + trainData[i][1] + ", " + trainData[i][2] + ", " + trainData[i][3] + ", " + trainData[i][4] + ", " + trainData[i][5] + ", " + trainData[i][6] + " };");
//  }

//  // test data
//  for (int i = 0; i < testData.Length; ++i)
//  {
//    Console.WriteLine("testData[" + i + "] = new double[] { " + testData[i][0] + ", " + testData[i][1] + ", " + testData[i][2] + ", " + testData[i][3] + ", " + testData[i][4] + ", " + testData[i][5] + ", " + testData[i][6] + " };");
//  }
//} // MakeTrainTest

